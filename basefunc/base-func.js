if (!window.console)     window.console     = {};
if (!window.console.log) window.console.log = function(){};
var Base64 = {_keyStr:"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=",encode:function(e){var t="";var n,r,i,s,o,u,a;var f=0;e=Base64._utf8_encode(e);while(f<e.length){n=e.charCodeAt(f++);r=e.charCodeAt(f++);i=e.charCodeAt(f++);s=n>>2;o=(n&3)<<4|r>>4;u=(r&15)<<2|i>>6;a=i&63;if(isNaN(r)){u=a=64}else if(isNaN(i)){a=64}t=t+this._keyStr.charAt(s)+this._keyStr.charAt(o)+this._keyStr.charAt(u)+this._keyStr.charAt(a)}return t},decode:function(e){var t="";var n,r,i;var s,o,u,a;var f=0;e=e.replace(/[^A-Za-z0-9+/=]/g,"");while(f<e.length){s=this._keyStr.indexOf(e.charAt(f++));o=this._keyStr.indexOf(e.charAt(f++));u=this._keyStr.indexOf(e.charAt(f++));a=this._keyStr.indexOf(e.charAt(f++));n=s<<2|o>>4;r=(o&15)<<4|u>>2;i=(u&3)<<6|a;t=t+String.fromCharCode(n);if(u!=64){t=t+String.fromCharCode(r)}if(a!=64){t=t+String.fromCharCode(i)}}t=Base64._utf8_decode(t);return t},_utf8_encode:function(e){e=e.replace(/rn/g,"n");var t="";for(var n=0;n<e.length;n++){var r=e.charCodeAt(n);if(r<128){t+=String.fromCharCode(r)}else if(r>127&&r<2048){t+=String.fromCharCode(r>>6|192);t+=String.fromCharCode(r&63|128)}else{t+=String.fromCharCode(r>>12|224);t+=String.fromCharCode(r>>6&63|128);t+=String.fromCharCode(r&63|128)}}return t},_utf8_decode:function(e){var t="";var n=0;var r=c1=c2=0;while(n<e.length){r=e.charCodeAt(n);if(r<128){t+=String.fromCharCode(r);n++}else if(r>191&&r<224){c2=e.charCodeAt(n+1);t+=String.fromCharCode((r&31)<<6|c2&63);n+=2}else{c2=e.charCodeAt(n+1);c3=e.charCodeAt(n+2);t+=String.fromCharCode((r&15)<<12|(c2&63)<<6|c3&63);n+=3}}return t}};
var Md5Hash = function(s){function L(k,d){return(k<<d)|(k>>>(32-d))}function K(G,k){var I,d,F,H,x;F=(G&2147483648);H=(k&2147483648);I=(G&1073741824);d=(k&1073741824);x=(G&1073741823)+(k&1073741823);if(I&d){return(x^2147483648^F^H)}if(I|d){if(x&1073741824){return(x^3221225472^F^H)}else{return(x^1073741824^F^H)}}else{return(x^F^H)}}function r(d,F,k){return(d&F)|((~d)&k)}function q(d,F,k){return(d&k)|(F&(~k))}function p(d,F,k){return(d^F^k)}function n(d,F,k){return(F^(d|(~k)))}function u(G,F,aa,Z,k,H,I){G=K(G,K(K(r(F,aa,Z),k),I));return K(L(G,H),F)}function f(G,F,aa,Z,k,H,I){G=K(G,K(K(q(F,aa,Z),k),I));return K(L(G,H),F)}function D(G,F,aa,Z,k,H,I){G=K(G,K(K(p(F,aa,Z),k),I));return K(L(G,H),F)}function t(G,F,aa,Z,k,H,I){G=K(G,K(K(n(F,aa,Z),k),I));return K(L(G,H),F)}function e(G){var Z;var F=G.length;var x=F+8;var k=(x-(x%64))/64;var I=(k+1)*16;var aa=Array(I-1);var d=0;var H=0;while(H<F){Z=(H-(H%4))/4;d=(H%4)*8;aa[Z]=(aa[Z]| (G.charCodeAt(H)<<d));H++}Z=(H-(H%4))/4;d=(H%4)*8;aa[Z]=aa[Z]|(128<<d);aa[I-2]=F<<3;aa[I-1]=F>>>29;return aa}function B(x){var k="",F="",G,d;for(d=0;d<=3;d++){G=(x>>>(d*8))&255;F="0"+G.toString(16);k=k+F.substr(F.length-2,2)}return k}function J(k){k=k.replace(/rn/g,"n");var d="";for(var F=0;F<k.length;F++){var x=k.charCodeAt(F);if(x<128){d+=String.fromCharCode(x)}else{if((x>127)&&(x<2048)){d+=String.fromCharCode((x>>6)|192);d+=String.fromCharCode((x&63)|128)}else{d+=String.fromCharCode((x>>12)|224);d+=String.fromCharCode(((x>>6)&63)|128);d+=String.fromCharCode((x&63)|128)}}}return d}var C=Array();var P,h,E,v,g,Y,X,W,V;var S=7,Q=12,N=17,M=22;var A=5,z=9,y=14,w=20;var o=4,m=11,l=16,j=23;var U=6,T=10,R=15,O=21;s=J(s);C=e(s);Y=1732584193;X=4023233417;W=2562383102;V=271733878;for(P=0;P<C.length;P+=16){h=Y;E=X;v=W;g=V;Y=u(Y,X,W,V,C[P+0],S,3614090360);V=u(V,Y,X,W,C[P+1],Q,3905402710);W=u(W,V,Y,X,C[P+2],N,606105819);X=u(X,W,V,Y,C[P+3],M,3250441966);Y=u(Y,X,W,V,C[P+4],S,4118548399);V=u(V,Y,X,W,C[P+5],Q,1200080426);W=u(W,V,Y,X,C[P+6],N,2821735955);X=u(X,W,V,Y,C[P+7],M,4249261313);Y=u(Y,X,W,V,C[P+8],S,1770035416);V=u(V,Y,X,W,C[P+9],Q,2336552879);W=u(W,V,Y,X,C[P+10],N,4294925233);X=u(X,W,V,Y,C[P+11],M,2304563134);Y=u(Y,X,W,V,C[P+12],S,1804603682);V=u(V,Y,X,W,C[P+13],Q,4254626195);W=u(W,V,Y,X,C[P+14],N,2792965006);X=u(X,W,V,Y,C[P+15],M,1236535329);Y=f(Y,X,W,V,C[P+1],A,4129170786);V=f(V,Y,X,W,C[P+6],z,3225465664);W=f(W,V,Y,X,C[P+11],y,643717713);X=f(X,W,V,Y,C[P+0],w,3921069994);Y=f(Y,X,W,V,C[P+5],A,3593408605);V=f(V,Y,X,W,C[P+10],z,38016083);W=f(W,V,Y,X,C[P+15],y,3634488961);X=f(X,W,V,Y,C[P+4],w,3889429448);Y=f(Y,X,W,V,C[P+9],A,568446438);V=f(V,Y,X,W,C[P+14],z,3275163606);W=f(W,V,Y,X,C[P+3],y,4107603335);X=f(X,W,V,Y,C[P+8],w,1163531501);Y=f(Y,X,W,V,C[P+13],A,2850285829);V=f(V,Y,X,W,C[P+2],z,4243563512);W=f(W,V,Y,X,C[P+7],y,1735328473);X=f(X,W,V,Y,C[P+12],w,2368359562);Y=D(Y,X,W,V,C[P+5],o,4294588738);V=D(V,Y,X,W,C[P+8],m,2272392833);W=D(W,V,Y,X,C[P+11],l,1839030562);X=D(X,W,V,Y,C[P+14],j,4259657740);Y=D(Y,X,W,V,C[P+1],o,2763975236);V=D(V,Y,X,W,C[P+4],m,1272893353);W=D(W,V,Y,X,C[P+7],l,4139469664);X=D(X,W,V,Y,C[P+10],j,3200236656);Y=D(Y,X,W,V,C[P+13],o,681279174);V=D(V,Y,X,W,C[P+0],m,3936430074);W=D(W,V,Y,X,C[P+3],l,3572445317);X=D(X,W,V,Y,C[P+6],j,76029189);Y=D(Y,X,W,V,C[P+9],o,3654602809);V=D(V,Y,X,W,C[P+12],m,3873151461);W=D(W,V,Y,X,C[P+15],l,530742520);X=D(X,W,V,Y,C[P+2],j,3299628645);Y=t(Y,X,W,V,C[P+0],U,4096336452);V=t(V,Y,X,W,C[P+7],T,1126891415);W=t(W,V,Y,X,C[P+14],R,2878612391);X=t(X,W,V,Y,C[P+5],O,4237533241);Y=t(Y,X,W,V,C[P+12],U,1700485571);V=t(V,Y,X,W,C[P+3],T,2399980690);W=t(W,V,Y,X,C[P+10],R,4293915773);X=t(X,W,V,Y,C[P+1],O,2240044497);Y=t(Y,X,W,V,C[P+8],U,1873313359);V=t(V,Y,X,W,C[P+15],T,4264355552);W=t(W,V,Y,X,C[P+6],R,2734768916);X=t(X,W,V,Y,C[P+13],O,1309151649);Y=t(Y,X,W,V,C[P+4],U,4149444226);V=t(V,Y,X,W,C[P+11],T,3174756917);W=t(W,V,Y,X,C[P+2],R,718787259);X=t(X,W,V,Y,C[P+9],O,3951481745);Y=K(Y,h);X=K(X,E);W=K(W,v);V=K(V,g)}var i=B(Y)+B(X)+B(W)+B(V);return i.toLowerCase()};
if (typeof Array.prototype.forEach != 'function') {
	Array.prototype.forEach = function(callback){
		for (var i = 0; i < this.length; i++){
			callback.apply(this, [this[i], i, this]);
		}
	};
}
var BF = {};
// Encodings & Urls
BF.UrlEncode           = function(strInput)                          {
	return encodeURIComponent(strInput);
};
BF.UrlDecode           = function(strInput)                          {
 	return decodeURIComponent(strInput);
};
BF.HtmlCharsEncode     = function(htmlInput)                         {
	var listEncode = {
		"Á": "Aacute",
		"á": "aacute",
		"Ă": "Abreve",
		"ă": "abreve",
		"∾": "ac",
		"∿": "acd",
		"∾̳": "acE",
		"Â": "Acirc",
		"â": "acirc",
		"´": "acute",
		"А": "Acy",
		"а": "acy",
		"Æ": "AElig",
		"æ": "aelig",
		"⁡": "af",
		"𝔄": "Afr",
		"𝔞": "afr",
		"À": "Agrave",
		"à": "agrave",
		"ℵ": "aleph",
		"Α": "Alpha",
		"α": "alpha",
		"Ā": "Amacr",
		"ā": "amacr",
		"⨿": "amalg",
		"&": "amp",
		"⩕": "andand",
		"⩓": "And",
		"∧": "and",
		"⩜": "andd",
		"⩘": "andslope",
		"⩚": "andv",
		"∠": "ang",
		"⦤": "ange",
		"⦨": "angmsdaa",
		"⦩": "angmsdab",
		"⦪": "angmsdac",
		"⦫": "angmsdad",
		"⦬": "angmsdae",
		"⦭": "angmsdaf",
		"⦮": "angmsdag",
		"⦯": "angmsdah",
		"∡": "angmsd",
		"∟": "angrt",
		"⊾": "angrtvb",
		"⦝": "angrtvbd",
		"∢": "angsph",
		"Å": "angst",
		"⍼": "angzarr",
		"Ą": "Aogon",
		"ą": "aogon",
		"𝔸": "Aopf",
		"𝕒": "aopf",
		"⩯": "apacir",
		"≈": "ap",
		"⩰": "apE",
		"≊": "ape",
		"≋": "apid",
		"'": "apos",
		"å": "aring",
		"𝒜": "Ascr",
		"𝒶": "ascr",
		"≔": "colone",
		"*": "ast",
		"≍": "CupCap",
		"Ã": "Atilde",
		"ã": "atilde",
		"Ä": "Auml",
		"ä": "auml",
		"∳": "awconint",
		"⨑": "awint",
		"≌": "bcong",
		"϶": "bepsi",
		"‵": "bprime",
		"∽": "bsim",
		"⋍": "bsime",
		"∖": "setmn",
		"⫧": "Barv",
		"⊽": "barvee",
		"⌅": "barwed",
		"⌆": "Barwed",
		"⎵": "bbrk",
		"⎶": "bbrktbrk",
		"Б": "Bcy",
		"б": "bcy",
		"„": "bdquo",
		"∵": "becaus",
		"⦰": "bemptyv",
		"ℬ": "Bscr",
		"Β": "Beta",
		"β": "beta",
		"ℶ": "beth",
		"≬": "twixt",
		"𝔅": "Bfr",
		"𝔟": "bfr",
		"⋂": "xcap",
		"◯": "xcirc",
		"⋃": "xcup",
		"⨀": "xodot",
		"⨁": "xoplus",
		"⨂": "xotime",
		"⨆": "xsqcup",
		"★": "starf",
		"▽": "xdtri",
		"△": "xutri",
		"⨄": "xuplus",
		"⋁": "Vee",
		"⋀": "Wedge",
		"⤍": "rbarr",
		"⧫": "lozf",
		"▪": "squf",
		"▴": "utrif",
		"▾": "dtrif",
		"◂": "ltrif",
		"▸": "rtrif",
		"␣": "blank",
		"▒": "blk12",
		"░": "blk14",
		"▓": "blk34",
		"█": "block",
		"=⃥": "bne",
		"≡⃥": "bnequiv",
		"⫭": "bNot",
		"⌐": "bnot",
		"𝔹": "Bopf",
		"𝕓": "bopf",
		"⊥": "bot",
		"⋈": "bowtie",
		"⧉": "boxbox",
		"┐": "boxdl",
		"╕": "boxdL",
		"╖": "boxDl",
		"╗": "boxDL",
		"┌": "boxdr",
		"╒": "boxdR",
		"╓": "boxDr",
		"╔": "boxDR",
		"─": "boxh",
		"═": "boxH",
		"┬": "boxhd",
		"╤": "boxHd",
		"╥": "boxhD",
		"╦": "boxHD",
		"┴": "boxhu",
		"╧": "boxHu",
		"╨": "boxhU",
		"╩": "boxHU",
		"⊟": "minusb",
		"⊞": "plusb",
		"⊠": "timesb",
		"┘": "boxul",
		"╛": "boxuL",
		"╜": "boxUl",
		"╝": "boxUL",
		"└": "boxur",
		"╘": "boxuR",
		"╙": "boxUr",
		"╚": "boxUR",
		"│": "boxv",
		"║": "boxV",
		"┼": "boxvh",
		"╪": "boxvH",
		"╫": "boxVh",
		"╬": "boxVH",
		"┤": "boxvl",
		"╡": "boxvL",
		"╢": "boxVl",
		"╣": "boxVL",
		"├": "boxvr",
		"╞": "boxvR",
		"╟": "boxVr",
		"╠": "boxVR",
		"˘": "breve",
		"¦": "brvbar",
		"𝒷": "bscr",
		"⁏": "bsemi",
		"⧅": "bsolb",
		"\\": "bsol",
		"⟈": "bsolhsub",
		"•": "bull",
		"≎": "bump",
		"⪮": "bumpE",
		"≏": "bumpe",
		"Ć": "Cacute",
		"ć": "cacute",
		"⩄": "capand",
		"⩉": "capbrcup",
		"⩋": "capcap",
		"∩": "cap",
		"⋒": "Cap",
		"⩇": "capcup",
		"⩀": "capdot",
		"ⅅ": "DD",
		"∩︀": "caps",
		"⁁": "caret",
		"ˇ": "caron",
		"ℭ": "Cfr",
		"⩍": "ccaps",
		"Č": "Ccaron",
		"č": "ccaron",
		"Ç": "Ccedil",
		"ç": "ccedil",
		"Ĉ": "Ccirc",
		"ĉ": "ccirc",
		"∰": "Cconint",
		"⩌": "ccups",
		"⩐": "ccupssm",
		"Ċ": "Cdot",
		"ċ": "cdot",
		"¸": "cedil",
		"⦲": "cemptyv",
		"¢": "cent",
		"·": "middot",
		"𝔠": "cfr",
		"Ч": "CHcy",
		"ч": "chcy",
		"✓": "check",
		"Χ": "Chi",
		"χ": "chi",
		"ˆ": "circ",
		"≗": "cire",
		"↺": "olarr",
		"↻": "orarr",
		"⊛": "oast",
		"⊚": "ocir",
		"⊝": "odash",
		"⊙": "odot",
		"®": "reg",
		"Ⓢ": "oS",
		"⊖": "ominus",
		"⊕": "oplus",
		"⊗": "otimes",
		"○": "cir",
		"⧃": "cirE",
		"⨐": "cirfnint",
		"⫯": "cirmid",
		"⧂": "cirscir",
		"∲": "cwconint",
		"”": "rdquo",
		"’": "rsquo",
		"♣": "clubs",
		":": "colon",
		"∷": "Colon",
		"⩴": "Colone",
		",": "comma",
		"@": "commat",
		"∁": "comp",
		"∘": "compfn",
		"ℂ": "Copf",
		"≅": "cong",
		"⩭": "congdot",
		"≡": "equiv",
		"∮": "oint",
		"∯": "Conint",
		"𝕔": "copf",
		"∐": "coprod",
		"©": "copy",
		"℗": "copysr",
		"↵": "crarr",
		"✗": "cross",
		"⨯": "Cross",
		"𝒞": "Cscr",
		"𝒸": "cscr",
		"⫏": "csub",
		"⫑": "csube",
		"⫐": "csup",
		"⫒": "csupe",
		"⋯": "ctdot",
		"⤸": "cudarrl",
		"⤵": "cudarrr",
		"⋞": "cuepr",
		"⋟": "cuesc",
		"↶": "cularr",
		"⤽": "cularrp",
		"⩈": "cupbrcap",
		"⩆": "cupcap",
		"∪": "cup",
		"⋓": "Cup",
		"⩊": "cupcup",
		"⊍": "cupdot",
		"⩅": "cupor",
		"∪︀": "cups",
		"↷": "curarr",
		"⤼": "curarrm",
		"⋎": "cuvee",
		"⋏": "cuwed",
		"¤": "curren",
		"∱": "cwint",
		"⌭": "cylcty",
		"†": "dagger",
		"‡": "Dagger",
		"ℸ": "daleth",
		"↓": "darr",
		"↡": "Darr",
		"⇓": "dArr",
		"‐": "dash",
		"⫤": "Dashv",
		"⊣": "dashv",
		"⤏": "rBarr",
		"˝": "dblac",
		"Ď": "Dcaron",
		"ď": "dcaron",
		"Д": "Dcy",
		"д": "dcy",
		"⇊": "ddarr",
		"ⅆ": "dd",
		"⤑": "DDotrahd",
		"⩷": "eDDot",
		"°": "deg",
		"∇": "Del",
		"Δ": "Delta",
		"δ": "delta",
		"⦱": "demptyv",
		"⥿": "dfisht",
		"𝔇": "Dfr",
		"𝔡": "dfr",
		"⥥": "dHar",
		"⇃": "dharl",
		"⇂": "dharr",
		"˙": "dot",
		"`": "grave",
		"˜": "tilde",
		"⋄": "diam",
		"♦": "diams",
		"¨": "die",
		"ϝ": "gammad",
		"⋲": "disin",
		"÷": "div",
		"⋇": "divonx",
		"Ђ": "DJcy",
		"ђ": "djcy",
		"⌞": "dlcorn",
		"⌍": "dlcrop",
		$: "dollar",
		"𝔻": "Dopf",
		"𝕕": "dopf",
		"⃜": "DotDot",
		"≐": "doteq",
		"≑": "eDot",
		"∸": "minusd",
		"∔": "plusdo",
		"⊡": "sdotb",
		"⇐": "lArr",
		"⇔": "iff",
		"⟸": "xlArr",
		"⟺": "xhArr",
		"⟹": "xrArr",
		"⇒": "rArr",
		"⊨": "vDash",
		"⇑": "uArr",
		"⇕": "vArr",
		"∥": "par",
		"⤓": "DownArrowBar",
		"⇵": "duarr",
		"̑": "DownBreve",
		"⥐": "DownLeftRightVector",
		"⥞": "DownLeftTeeVector",
		"⥖": "DownLeftVectorBar",
		"↽": "lhard",
		"⥟": "DownRightTeeVector",
		"⥗": "DownRightVectorBar",
		"⇁": "rhard",
		"↧": "mapstodown",
		"⊤": "top",
		"⤐": "RBarr",
		"⌟": "drcorn",
		"⌌": "drcrop",
		"𝒟": "Dscr",
		"𝒹": "dscr",
		"Ѕ": "DScy",
		"ѕ": "dscy",
		"⧶": "dsol",
		"Đ": "Dstrok",
		"đ": "dstrok",
		"⋱": "dtdot",
		"▿": "dtri",
		"⥯": "duhar",
		"⦦": "dwangle",
		"Џ": "DZcy",
		"џ": "dzcy",
		"⟿": "dzigrarr",
		"É": "Eacute",
		"é": "eacute",
		"⩮": "easter",
		"Ě": "Ecaron",
		"ě": "ecaron",
		"Ê": "Ecirc",
		"ê": "ecirc",
		"≖": "ecir",
		"≕": "ecolon",
		"Э": "Ecy",
		"э": "ecy",
		"Ė": "Edot",
		"ė": "edot",
		"ⅇ": "ee",
		"≒": "efDot",
		"𝔈": "Efr",
		"𝔢": "efr",
		"⪚": "eg",
		"È": "Egrave",
		"è": "egrave",
		"⪖": "egs",
		"⪘": "egsdot",
		"⪙": "el",
		"∈": "in",
		"⏧": "elinters",
		"ℓ": "ell",
		"⪕": "els",
		"⪗": "elsdot",
		"Ē": "Emacr",
		"ē": "emacr",
		"∅": "empty",
		"◻": "EmptySmallSquare",
		"▫": "EmptyVerySmallSquare",
		" ": "emsp13",
		" ": "emsp14",
		" ": "emsp",
		"Ŋ": "ENG",
		"ŋ": "eng",
		" ": "ensp",
		"Ę": "Eogon",
		"ę": "eogon",
		"𝔼": "Eopf",
		"𝕖": "eopf",
		"⋕": "epar",
		"⧣": "eparsl",
		"⩱": "eplus",
		"ε": "epsi",
		"Ε": "Epsilon",
		"ϵ": "epsiv",
		"≂": "esim",
		"⩵": "Equal",
		"=": "equals",
		"≟": "equest",
		"⇌": "rlhar",
		"⩸": "equivDD",
		"⧥": "eqvparsl",
		"⥱": "erarr",
		"≓": "erDot",
		"ℯ": "escr",
		"ℰ": "Escr",
		"⩳": "Esim",
		"Η": "Eta",
		"η": "eta",
		"Ð": "ETH",
		"ð": "eth",
		"Ë": "Euml",
		"ë": "euml",
		"€": "euro",
		"!": "excl",
		"∃": "exist",
		"Ф": "Fcy",
		"ф": "fcy",
		"♀": "female",
		"ﬃ": "ffilig",
		"ﬀ": "fflig",
		"ﬄ": "ffllig",
		"𝔉": "Ffr",
		"𝔣": "ffr",
		"ﬁ": "filig",
		"◼": "FilledSmallSquare",
		fj: "fjlig",
		"♭": "flat",
		"ﬂ": "fllig",
		"▱": "fltns",
		"ƒ": "fnof",
		"𝔽": "Fopf",
		"𝕗": "fopf",
		"∀": "forall",
		"⋔": "fork",
		"⫙": "forkv",
		"ℱ": "Fscr",
		"⨍": "fpartint",
		"½": "half",
		"⅓": "frac13",
		"¼": "frac14",
		"⅕": "frac15",
		"⅙": "frac16",
		"⅛": "frac18",
		"⅔": "frac23",
		"⅖": "frac25",
		"¾": "frac34",
		"⅗": "frac35",
		"⅜": "frac38",
		"⅘": "frac45",
		"⅚": "frac56",
		"⅝": "frac58",
		"⅞": "frac78",
		"⁄": "frasl",
		"⌢": "frown",
		"𝒻": "fscr",
		"ǵ": "gacute",
		"Γ": "Gamma",
		"γ": "gamma",
		"Ϝ": "Gammad",
		"⪆": "gap",
		"Ğ": "Gbreve",
		"ğ": "gbreve",
		"Ģ": "Gcedil",
		"Ĝ": "Gcirc",
		"ĝ": "gcirc",
		"Г": "Gcy",
		"г": "gcy",
		"Ġ": "Gdot",
		"ġ": "gdot",
		"≥": "ge",
		"≧": "gE",
		"⪌": "gEl",
		"⋛": "gel",
		"⩾": "ges",
		"⪩": "gescc",
		"⪀": "gesdot",
		"⪂": "gesdoto",
		"⪄": "gesdotol",
		"⋛︀": "gesl",
		"⪔": "gesles",
		"𝔊": "Gfr",
		"𝔤": "gfr",
		"≫": "gg",
		"⋙": "Gg",
		"ℷ": "gimel",
		"Ѓ": "GJcy",
		"ѓ": "gjcy",
		"⪥": "gla",
		"≷": "gl",
		"⪒": "glE",
		"⪤": "glj",
		"⪊": "gnap",
		"⪈": "gne",
		"≩": "gnE",
		"⋧": "gnsim",
		"𝔾": "Gopf",
		"𝕘": "gopf",
		"⪢": "GreaterGreater",
		"≳": "gsim",
		"𝒢": "Gscr",
		"ℊ": "gscr",
		"⪎": "gsime",
		"⪐": "gsiml",
		"⪧": "gtcc",
		"⩺": "gtcir",
		">": "gt",
		"⋗": "gtdot",
		"⦕": "gtlPar",
		"⩼": "gtquest",
		"⥸": "gtrarr",
		"≩︀": "gvnE",
		" ": "hairsp",
		"ℋ": "Hscr",
		"Ъ": "HARDcy",
		"ъ": "hardcy",
		"⥈": "harrcir",
		"↔": "harr",
		"↭": "harrw",
		"^": "Hat",
		"ℏ": "hbar",
		"Ĥ": "Hcirc",
		"ĥ": "hcirc",
		"♥": "hearts",
		"…": "mldr",
		"⊹": "hercon",
		"𝔥": "hfr",
		"ℌ": "Hfr",
		"⤥": "searhk",
		"⤦": "swarhk",
		"⇿": "hoarr",
		"∻": "homtht",
		"↩": "larrhk",
		"↪": "rarrhk",
		"𝕙": "hopf",
		"ℍ": "Hopf",
		"―": "horbar",
		"𝒽": "hscr",
		"Ħ": "Hstrok",
		"ħ": "hstrok",
		"⁃": "hybull",
		"Í": "Iacute",
		"í": "iacute",
		"⁣": "ic",
		"Î": "Icirc",
		"î": "icirc",
		"И": "Icy",
		"и": "icy",
		"İ": "Idot",
		"Е": "IEcy",
		"е": "iecy",
		"¡": "iexcl",
		"𝔦": "ifr",
		"ℑ": "Im",
		"Ì": "Igrave",
		"ì": "igrave",
		"ⅈ": "ii",
		"⨌": "qint",
		"∭": "tint",
		"⧜": "iinfin",
		"℩": "iiota",
		"Ĳ": "IJlig",
		"ĳ": "ijlig",
		"Ī": "Imacr",
		"ī": "imacr",
		"ℐ": "Iscr",
		"ı": "imath",
		"⊷": "imof",
		"Ƶ": "imped",
		"℅": "incare",
		"∞": "infin",
		"⧝": "infintie",
		"⊺": "intcal",
		"∫": "int",
		"∬": "Int",
		"ℤ": "Zopf",
		"⨗": "intlarhk",
		"⨼": "iprod",
		"⁢": "it",
		"Ё": "IOcy",
		"ё": "iocy",
		"Į": "Iogon",
		"į": "iogon",
		"𝕀": "Iopf",
		"𝕚": "iopf",
		"Ι": "Iota",
		"ι": "iota",
		"¿": "iquest",
		"𝒾": "iscr",
		"⋵": "isindot",
		"⋹": "isinE",
		"⋴": "isins",
		"⋳": "isinsv",
		"Ĩ": "Itilde",
		"ĩ": "itilde",
		"І": "Iukcy",
		"і": "iukcy",
		"Ï": "Iuml",
		"ï": "iuml",
		"Ĵ": "Jcirc",
		"ĵ": "jcirc",
		"Й": "Jcy",
		"й": "jcy",
		"𝔍": "Jfr",
		"𝔧": "jfr",
		"ȷ": "jmath",
		"𝕁": "Jopf",
		"𝕛": "jopf",
		"𝒥": "Jscr",
		"𝒿": "jscr",
		"Ј": "Jsercy",
		"ј": "jsercy",
		"Є": "Jukcy",
		"є": "jukcy",
		"Κ": "Kappa",
		"κ": "kappa",
		"ϰ": "kappav",
		"Ķ": "Kcedil",
		"ķ": "kcedil",
		"К": "Kcy",
		"к": "kcy",
		"𝔎": "Kfr",
		"𝔨": "kfr",
		"ĸ": "kgreen",
		"Х": "KHcy",
		"х": "khcy",
		"Ќ": "KJcy",
		"ќ": "kjcy",
		"𝕂": "Kopf",
		"𝕜": "kopf",
		"𝒦": "Kscr",
		"𝓀": "kscr",
		"⇚": "lAarr",
		"Ĺ": "Lacute",
		"ĺ": "lacute",
		"⦴": "laemptyv",
		"ℒ": "Lscr",
		"Λ": "Lambda",
		"λ": "lambda",
		"⟨": "lang",
		"⟪": "Lang",
		"⦑": "langd",
		"⪅": "lap",
		"«": "laquo",
		"⇤": "larrb",
		"⤟": "larrbfs",
		"←": "larr",
		"↞": "Larr",
		"⤝": "larrfs",
		"↫": "larrlp",
		"⤹": "larrpl",
		"⥳": "larrsim",
		"↢": "larrtl",
		"⤙": "latail",
		"⤛": "lAtail",
		"⪫": "lat",
		"⪭": "late",
		"⪭︀": "lates",
		"⤌": "lbarr",
		"⤎": "lBarr",
		"❲": "lbbrk",
		"{": "lcub",
		"[": "lsqb",
		"⦋": "lbrke",
		"⦏": "lbrksld",
		"⦍": "lbrkslu",
		"Ľ": "Lcaron",
		"ľ": "lcaron",
		"Ļ": "Lcedil",
		"ļ": "lcedil",
		"⌈": "lceil",
		"Л": "Lcy",
		"л": "lcy",
		"⤶": "ldca",
		"“": "ldquo",
		"⥧": "ldrdhar",
		"⥋": "ldrushar",
		"↲": "ldsh",
		"≤": "le",
		"≦": "lE",
		"⇆": "lrarr",
		"⟦": "lobrk",
		"⥡": "LeftDownTeeVector",
		"⥙": "LeftDownVectorBar",
		"⌊": "lfloor",
		"↼": "lharu",
		"⇇": "llarr",
		"⇋": "lrhar",
		"⥎": "LeftRightVector",
		"↤": "mapstoleft",
		"⥚": "LeftTeeVector",
		"⋋": "lthree",
		"⧏": "LeftTriangleBar",
		"⊲": "vltri",
		"⊴": "ltrie",
		"⥑": "LeftUpDownVector",
		"⥠": "LeftUpTeeVector",
		"⥘": "LeftUpVectorBar",
		"↿": "uharl",
		"⥒": "LeftVectorBar",
		"⪋": "lEg",
		"⋚": "leg",
		"⩽": "les",
		"⪨": "lescc",
		"⩿": "lesdot",
		"⪁": "lesdoto",
		"⪃": "lesdotor",
		"⋚︀": "lesg",
		"⪓": "lesges",
		"⋖": "ltdot",
		"≶": "lg",
		"⪡": "LessLess",
		"≲": "lsim",
		"⥼": "lfisht",
		"𝔏": "Lfr",
		"𝔩": "lfr",
		"⪑": "lgE",
		"⥢": "lHar",
		"⥪": "lharul",
		"▄": "lhblk",
		"Љ": "LJcy",
		"љ": "ljcy",
		"≪": "ll",
		"⋘": "Ll",
		"⥫": "llhard",
		"◺": "lltri",
		"Ŀ": "Lmidot",
		"ŀ": "lmidot",
		"⎰": "lmoust",
		"⪉": "lnap",
		"⪇": "lne",
		"≨": "lnE",
		"⋦": "lnsim",
		"⟬": "loang",
		"⇽": "loarr",
		"⟵": "xlarr",
		"⟷": "xharr",
		"⟼": "xmap",
		"⟶": "xrarr",
		"↬": "rarrlp",
		"⦅": "lopar",
		"𝕃": "Lopf",
		"𝕝": "lopf",
		"⨭": "loplus",
		"⨴": "lotimes",
		"∗": "lowast",
		_: "lowbar",
		"↙": "swarr",
		"↘": "searr",
		"◊": "loz",
		"(": "lpar",
		"⦓": "lparlt",
		"⥭": "lrhard",
		"‎": "lrm",
		"⊿": "lrtri",
		"‹": "lsaquo",
		"𝓁": "lscr",
		"↰": "lsh",
		"⪍": "lsime",
		"⪏": "lsimg",
		"‘": "lsquo",
		"‚": "sbquo",
		"Ł": "Lstrok",
		"ł": "lstrok",
		"⪦": "ltcc",
		"⩹": "ltcir",
		"<": "lt",
		"⋉": "ltimes",
		"⥶": "ltlarr",
		"⩻": "ltquest",
		"◃": "ltri",
		"⦖": "ltrPar",
		"⥊": "lurdshar",
		"⥦": "luruhar",
		"≨︀": "lvnE",
		"¯": "macr",
		"♂": "male",
		"✠": "malt",
		"⤅": "Map",
		"↦": "map",
		"↥": "mapstoup",
		"▮": "marker",
		"⨩": "mcomma",
		"М": "Mcy",
		"м": "mcy",
		"—": "mdash",
		"∺": "mDDot",
		" ": "MediumSpace",
		"ℳ": "Mscr",
		"𝔐": "Mfr",
		"𝔪": "mfr",
		"℧": "mho",
		"µ": "micro",
		"⫰": "midcir",
		"∣": "mid",
		"−": "minus",
		"⨪": "minusdu",
		"∓": "mp",
		"⫛": "mlcp",
		"⊧": "models",
		"𝕄": "Mopf",
		"𝕞": "mopf",
		"𝓂": "mscr",
		"Μ": "Mu",
		"μ": "mu",
		"⊸": "mumap",
		"Ń": "Nacute",
		"ń": "nacute",
		"∠⃒": "nang",
		"≉": "nap",
		"⩰̸": "napE",
		"≋̸": "napid",
		"ŉ": "napos",
		"♮": "natur",
		"ℕ": "Nopf",
		" ": "nbsp",
		"≎̸": "nbump",
		"≏̸": "nbumpe",
		"⩃": "ncap",
		"Ň": "Ncaron",
		"ň": "ncaron",
		"Ņ": "Ncedil",
		"ņ": "ncedil",
		"≇": "ncong",
		"⩭̸": "ncongdot",
		"⩂": "ncup",
		"Н": "Ncy",
		"н": "ncy",
		"–": "ndash",
		"⤤": "nearhk",
		"↗": "nearr",
		"⇗": "neArr",
		"≠": "ne",
		"≐̸": "nedot",
		"​": "ZeroWidthSpace",
		"≢": "nequiv",
		"⤨": "toea",
		"≂̸": "nesim",
		"\n": "NewLine",
		"∄": "nexist",
		"𝔑": "Nfr",
		"𝔫": "nfr",
		"≧̸": "ngE",
		"≱": "nge",
		"⩾̸": "nges",
		"⋙̸": "nGg",
		"≵": "ngsim",
		"≫⃒": "nGt",
		"≯": "ngt",
		"≫̸": "nGtv",
		"↮": "nharr",
		"⇎": "nhArr",
		"⫲": "nhpar",
		"∋": "ni",
		"⋼": "nis",
		"⋺": "nisd",
		"Њ": "NJcy",
		"њ": "njcy",
		"↚": "nlarr",
		"⇍": "nlArr",
		"‥": "nldr",
		"≦̸": "nlE",
		"≰": "nle",
		"⩽̸": "nles",
		"≮": "nlt",
		"⋘̸": "nLl",
		"≴": "nlsim",
		"≪⃒": "nLt",
		"⋪": "nltri",
		"⋬": "nltrie",
		"≪̸": "nLtv",
		"∤": "nmid",
		"⁠": "NoBreak",
		"𝕟": "nopf",
		"⫬": "Not",
		"¬": "not",
		"≭": "NotCupCap",
		"∦": "npar",
		"∉": "notin",
		"≹": "ntgl",
		"⋵̸": "notindot",
		"⋹̸": "notinE",
		"⋷": "notinvb",
		"⋶": "notinvc",
		"⧏̸": "NotLeftTriangleBar",
		"≸": "ntlg",
		"⪢̸": "NotNestedGreaterGreater",
		"⪡̸": "NotNestedLessLess",
		"∌": "notni",
		"⋾": "notnivb",
		"⋽": "notnivc",
		"⊀": "npr",
		"⪯̸": "npre",
		"⋠": "nprcue",
		"⧐̸": "NotRightTriangleBar",
		"⋫": "nrtri",
		"⋭": "nrtrie",
		"⊏̸": "NotSquareSubset",
		"⋢": "nsqsube",
		"⊐̸": "NotSquareSuperset",
		"⋣": "nsqsupe",
		"⊂⃒": "vnsub",
		"⊈": "nsube",
		"⊁": "nsc",
		"⪰̸": "nsce",
		"⋡": "nsccue",
		"≿̸": "NotSucceedsTilde",
		"⊃⃒": "vnsup",
		"⊉": "nsupe",
		"≁": "nsim",
		"≄": "nsime",
		"⫽⃥": "nparsl",
		"∂̸": "npart",
		"⨔": "npolint",
		"⤳̸": "nrarrc",
		"↛": "nrarr",
		"⇏": "nrArr",
		"↝̸": "nrarrw",
		"𝒩": "Nscr",
		"𝓃": "nscr",
		"⊄": "nsub",
		"⫅̸": "nsubE",
		"⊅": "nsup",
		"⫆̸": "nsupE",
		"Ñ": "Ntilde",
		"ñ": "ntilde",
		"Ν": "Nu",
		"ν": "nu",
		"#": "num",
		"№": "numero",
		" ": "numsp",
		"≍⃒": "nvap",
		"⊬": "nvdash",
		"⊭": "nvDash",
		"⊮": "nVdash",
		"⊯": "nVDash",
		"≥⃒": "nvge",
		">⃒": "nvgt",
		"⤄": "nvHarr",
		"⧞": "nvinfin",
		"⤂": "nvlArr",
		"≤⃒": "nvle",
		"<⃒": "nvlt",
		"⊴⃒": "nvltrie",
		"⤃": "nvrArr",
		"⊵⃒": "nvrtrie",
		"∼⃒": "nvsim",
		"⤣": "nwarhk",
		"↖": "nwarr",
		"⇖": "nwArr",
		"⤧": "nwnear",
		"Ó": "Oacute",
		"ó": "oacute",
		"Ô": "Ocirc",
		"ô": "ocirc",
		"О": "Ocy",
		"о": "ocy",
		"Ő": "Odblac",
		"ő": "odblac",
		"⨸": "odiv",
		"⦼": "odsold",
		"Œ": "OElig",
		"œ": "oelig",
		"⦿": "ofcir",
		"𝔒": "Ofr",
		"𝔬": "ofr",
		"˛": "ogon",
		"Ò": "Ograve",
		"ò": "ograve",
		"⧁": "ogt",
		"⦵": "ohbar",
		"Ω": "ohm",
		"⦾": "olcir",
		"⦻": "olcross",
		"‾": "oline",
		"⧀": "olt",
		"Ō": "Omacr",
		"ō": "omacr",
		"ω": "omega",
		"Ο": "Omicron",
		"ο": "omicron",
		"⦶": "omid",
		"𝕆": "Oopf",
		"𝕠": "oopf",
		"⦷": "opar",
		"⦹": "operp",
		"⩔": "Or",
		"∨": "or",
		"⩝": "ord",
		"ℴ": "oscr",
		"ª": "ordf",
		"º": "ordm",
		"⊶": "origof",
		"⩖": "oror",
		"⩗": "orslope",
		"⩛": "orv",
		"𝒪": "Oscr",
		"Ø": "Oslash",
		"ø": "oslash",
		"⊘": "osol",
		"Õ": "Otilde",
		"õ": "otilde",
		"⨶": "otimesas",
		"⨷": "Otimes",
		"Ö": "Ouml",
		"ö": "ouml",
		"⌽": "ovbar",
		"⏞": "OverBrace",
		"⎴": "tbrk",
		"⏜": "OverParenthesis",
		"¶": "para",
		"⫳": "parsim",
		"⫽": "parsl",
		"∂": "part",
		"П": "Pcy",
		"п": "pcy",
		"%": "percnt",
		".": "period",
		"‰": "permil",
		"‱": "pertenk",
		"𝔓": "Pfr",
		"𝔭": "pfr",
		"Φ": "Phi",
		"φ": "phi",
		"ϕ": "phiv",
		"☎": "phone",
		"Π": "Pi",
		"π": "pi",
		"ϖ": "piv",
		"ℎ": "planckh",
		"⨣": "plusacir",
		"⨢": "pluscir",
		"+": "plus",
		"⨥": "plusdu",
		"⩲": "pluse",
		"±": "pm",
		"⨦": "plussim",
		"⨧": "plustwo",
		"⨕": "pointint",
		"𝕡": "popf",
		"ℙ": "Popf",
		"£": "pound",
		"⪷": "prap",
		"⪻": "Pr",
		"≺": "pr",
		"≼": "prcue",
		"⪯": "pre",
		"≾": "prsim",
		"⪹": "prnap",
		"⪵": "prnE",
		"⋨": "prnsim",
		"⪳": "prE",
		"′": "prime",
		"″": "Prime",
		"∏": "prod",
		"⌮": "profalar",
		"⌒": "profline",
		"⌓": "profsurf",
		"∝": "prop",
		"⊰": "prurel",
		"𝒫": "Pscr",
		"𝓅": "pscr",
		"Ψ": "Psi",
		"ψ": "psi",
		" ": "puncsp",
		"𝔔": "Qfr",
		"𝔮": "qfr",
		"𝕢": "qopf",
		"ℚ": "Qopf",
		"⁗": "qprime",
		"𝒬": "Qscr",
		"𝓆": "qscr",
		"⨖": "quatint",
		"?": "quest",
		'"': "quot",
		"⇛": "rAarr",
		"∽̱": "race",
		"Ŕ": "Racute",
		"ŕ": "racute",
		"√": "Sqrt",
		"⦳": "raemptyv",
		"⟩": "rang",
		"⟫": "Rang",
		"⦒": "rangd",
		"⦥": "range",
		"»": "raquo",
		"⥵": "rarrap",
		"⇥": "rarrb",
		"⤠": "rarrbfs",
		"⤳": "rarrc",
		"→": "rarr",
		"↠": "Rarr",
		"⤞": "rarrfs",
		"⥅": "rarrpl",
		"⥴": "rarrsim",
		"⤖": "Rarrtl",
		"↣": "rarrtl",
		"↝": "rarrw",
		"⤚": "ratail",
		"⤜": "rAtail",
		"∶": "ratio",
		"❳": "rbbrk",
		"}": "rcub",
		"]": "rsqb",
		"⦌": "rbrke",
		"⦎": "rbrksld",
		"⦐": "rbrkslu",
		"Ř": "Rcaron",
		"ř": "rcaron",
		"Ŗ": "Rcedil",
		"ŗ": "rcedil",
		"⌉": "rceil",
		"Р": "Rcy",
		"р": "rcy",
		"⤷": "rdca",
		"⥩": "rdldhar",
		"↳": "rdsh",
		"ℜ": "Re",
		"ℛ": "Rscr",
		"ℝ": "Ropf",
		"▭": "rect",
		"⥽": "rfisht",
		"⌋": "rfloor",
		"𝔯": "rfr",
		"⥤": "rHar",
		"⇀": "rharu",
		"⥬": "rharul",
		"Ρ": "Rho",
		"ρ": "rho",
		"ϱ": "rhov",
		"⇄": "rlarr",
		"⟧": "robrk",
		"⥝": "RightDownTeeVector",
		"⥕": "RightDownVectorBar",
		"⇉": "rrarr",
		"⊢": "vdash",
		"⥛": "RightTeeVector",
		"⋌": "rthree",
		"⧐": "RightTriangleBar",
		"⊳": "vrtri",
		"⊵": "rtrie",
		"⥏": "RightUpDownVector",
		"⥜": "RightUpTeeVector",
		"⥔": "RightUpVectorBar",
		"↾": "uharr",
		"⥓": "RightVectorBar",
		"˚": "ring",
		"‏": "rlm",
		"⎱": "rmoust",
		"⫮": "rnmid",
		"⟭": "roang",
		"⇾": "roarr",
		"⦆": "ropar",
		"𝕣": "ropf",
		"⨮": "roplus",
		"⨵": "rotimes",
		"⥰": "RoundImplies",
		")": "rpar",
		"⦔": "rpargt",
		"⨒": "rppolint",
		"›": "rsaquo",
		"𝓇": "rscr",
		"↱": "rsh",
		"⋊": "rtimes",
		"▹": "rtri",
		"⧎": "rtriltri",
		"⧴": "RuleDelayed",
		"⥨": "ruluhar",
		"℞": "rx",
		"Ś": "Sacute",
		"ś": "sacute",
		"⪸": "scap",
		"Š": "Scaron",
		"š": "scaron",
		"⪼": "Sc",
		"≻": "sc",
		"≽": "sccue",
		"⪰": "sce",
		"⪴": "scE",
		"Ş": "Scedil",
		"ş": "scedil",
		"Ŝ": "Scirc",
		"ŝ": "scirc",
		"⪺": "scnap",
		"⪶": "scnE",
		"⋩": "scnsim",
		"⨓": "scpolint",
		"≿": "scsim",
		"С": "Scy",
		"с": "scy",
		"⋅": "sdot",
		"⩦": "sdote",
		"⇘": "seArr",
		"§": "sect",
		";": "semi",
		"⤩": "tosa",
		"✶": "sext",
		"𝔖": "Sfr",
		"𝔰": "sfr",
		"♯": "sharp",
		"Щ": "SHCHcy",
		"щ": "shchcy",
		"Ш": "SHcy",
		"ш": "shcy",
		"↑": "uarr",
		"­": "shy",
		"Σ": "Sigma",
		"σ": "sigma",
		"ς": "sigmaf",
		"∼": "sim",
		"⩪": "simdot",
		"≃": "sime",
		"⪞": "simg",
		"⪠": "simgE",
		"⪝": "siml",
		"⪟": "simlE",
		"≆": "simne",
		"⨤": "simplus",
		"⥲": "simrarr",
		"⨳": "smashp",
		"⧤": "smeparsl",
		"⌣": "smile",
		"⪪": "smt",
		"⪬": "smte",
		"⪬︀": "smtes",
		"Ь": "SOFTcy",
		"ь": "softcy",
		"⌿": "solbar",
		"⧄": "solb",
		"/": "sol",
		"𝕊": "Sopf",
		"𝕤": "sopf",
		"♠": "spades",
		"⊓": "sqcap",
		"⊓︀": "sqcaps",
		"⊔": "sqcup",
		"⊔︀": "sqcups",
		"⊏": "sqsub",
		"⊑": "sqsube",
		"⊐": "sqsup",
		"⊒": "sqsupe",
		"□": "squ",
		"𝒮": "Sscr",
		"𝓈": "sscr",
		"⋆": "Star",
		"☆": "star",
		"⊂": "sub",
		"⋐": "Sub",
		"⪽": "subdot",
		"⫅": "subE",
		"⊆": "sube",
		"⫃": "subedot",
		"⫁": "submult",
		"⫋": "subnE",
		"⊊": "subne",
		"⪿": "subplus",
		"⥹": "subrarr",
		"⫇": "subsim",
		"⫕": "subsub",
		"⫓": "subsup",
		"∑": "sum",
		"♪": "sung",
		"¹": "sup1",
		"²": "sup2",
		"³": "sup3",
		"⊃": "sup",
		"⋑": "Sup",
		"⪾": "supdot",
		"⫘": "supdsub",
		"⫆": "supE",
		"⊇": "supe",
		"⫄": "supedot",
		"⟉": "suphsol",
		"⫗": "suphsub",
		"⥻": "suplarr",
		"⫂": "supmult",
		"⫌": "supnE",
		"⊋": "supne",
		"⫀": "supplus",
		"⫈": "supsim",
		"⫔": "supsub",
		"⫖": "supsup",
		"⇙": "swArr",
		"⤪": "swnwar",
		"ß": "szlig",
		"	": "Tab",
		"⌖": "target",
		"Τ": "Tau",
		"τ": "tau",
		"Ť": "Tcaron",
		"ť": "tcaron",
		"Ţ": "Tcedil",
		"ţ": "tcedil",
		"Т": "Tcy",
		"т": "tcy",
		"⃛": "tdot",
		"⌕": "telrec",
		"𝔗": "Tfr",
		"𝔱": "tfr",
		"∴": "there4",
		"Θ": "Theta",
		"θ": "theta",
		"ϑ": "thetav",
		"  ": "ThickSpace",
		" ": "thinsp",
		"Þ": "THORN",
		"þ": "thorn",
		"⨱": "timesbar",
		"×": "times",
		"⨰": "timesd",
		"⌶": "topbot",
		"⫱": "topcir",
		"𝕋": "Topf",
		"𝕥": "topf",
		"⫚": "topfork",
		"‴": "tprime",
		"™": "trade",
		"▵": "utri",
		"≜": "trie",
		"◬": "tridot",
		"⨺": "triminus",
		"⨹": "triplus",
		"⧍": "trisb",
		"⨻": "tritime",
		"⏢": "trpezium",
		"𝒯": "Tscr",
		"𝓉": "tscr",
		"Ц": "TScy",
		"ц": "tscy",
		"Ћ": "TSHcy",
		"ћ": "tshcy",
		"Ŧ": "Tstrok",
		"ŧ": "tstrok",
		"Ú": "Uacute",
		"ú": "uacute",
		"↟": "Uarr",
		"⥉": "Uarrocir",
		"Ў": "Ubrcy",
		"ў": "ubrcy",
		"Ŭ": "Ubreve",
		"ŭ": "ubreve",
		"Û": "Ucirc",
		"û": "ucirc",
		"У": "Ucy",
		"у": "ucy",
		"⇅": "udarr",
		"Ű": "Udblac",
		"ű": "udblac",
		"⥮": "udhar",
		"⥾": "ufisht",
		"𝔘": "Ufr",
		"𝔲": "ufr",
		"Ù": "Ugrave",
		"ù": "ugrave",
		"⥣": "uHar",
		"▀": "uhblk",
		"⌜": "ulcorn",
		"⌏": "ulcrop",
		"◸": "ultri",
		"Ū": "Umacr",
		"ū": "umacr",
		"⏟": "UnderBrace",
		"⏝": "UnderParenthesis",
		"⊎": "uplus",
		"Ų": "Uogon",
		"ų": "uogon",
		"𝕌": "Uopf",
		"𝕦": "uopf",
		"⤒": "UpArrowBar",
		"↕": "varr",
		"υ": "upsi",
		"ϒ": "Upsi",
		"Υ": "Upsilon",
		"⇈": "uuarr",
		"⌝": "urcorn",
		"⌎": "urcrop",
		"Ů": "Uring",
		"ů": "uring",
		"◹": "urtri",
		"𝒰": "Uscr",
		"𝓊": "uscr",
		"⋰": "utdot",
		"Ũ": "Utilde",
		"ũ": "utilde",
		"Ü": "Uuml",
		"ü": "uuml",
		"⦧": "uwangle",
		"⦜": "vangrt",
		"⊊︀": "vsubne",
		"⫋︀": "vsubnE",
		"⊋︀": "vsupne",
		"⫌︀": "vsupnE",
		"⫨": "vBar",
		"⫫": "Vbar",
		"⫩": "vBarv",
		"В": "Vcy",
		"в": "vcy",
		"⊩": "Vdash",
		"⊫": "VDash",
		"⫦": "Vdashl",
		"⊻": "veebar",
		"≚": "veeeq",
		"⋮": "vellip",
		"|": "vert",
		"‖": "Vert",
		"❘": "VerticalSeparator",
		"≀": "wr",
		"𝔙": "Vfr",
		"𝔳": "vfr",
		"𝕍": "Vopf",
		"𝕧": "vopf",
		"𝒱": "Vscr",
		"𝓋": "vscr",
		"⊪": "Vvdash",
		"⦚": "vzigzag",
		"Ŵ": "Wcirc",
		"ŵ": "wcirc",
		"⩟": "wedbar",
		"≙": "wedgeq",
		"℘": "wp",
		"𝔚": "Wfr",
		"𝔴": "wfr",
		"𝕎": "Wopf",
		"𝕨": "wopf",
		"𝒲": "Wscr",
		"𝓌": "wscr",
		"𝔛": "Xfr",
		"𝔵": "xfr",
		"Ξ": "Xi",
		"ξ": "xi",
		"⋻": "xnis",
		"𝕏": "Xopf",
		"𝕩": "xopf",
		"𝒳": "Xscr",
		"𝓍": "xscr",
		"Ý": "Yacute",
		"ý": "yacute",
		"Я": "YAcy",
		"я": "yacy",
		"Ŷ": "Ycirc",
		"ŷ": "ycirc",
		"Ы": "Ycy",
		"ы": "ycy",
		"¥": "yen",
		"𝔜": "Yfr",
		"𝔶": "yfr",
		"Ї": "YIcy",
		"ї": "yicy",
		"𝕐": "Yopf",
		"𝕪": "yopf",
		"𝒴": "Yscr",
		"𝓎": "yscr",
		"Ю": "YUcy",
		"ю": "yucy",
		"ÿ": "yuml",
		"Ÿ": "Yuml",
		"Ź": "Zacute",
		"ź": "zacute",
		"Ž": "Zcaron",
		"ž": "zcaron",
		"З": "Zcy",
		"з": "zcy",
		"Ż": "Zdot",
		"ż": "zdot",
		"ℨ": "Zfr",
		"Ζ": "Zeta",
		"ζ": "zeta",
		"𝔷": "zfr",
		"Ж": "ZHcy",
		"ж": "zhcy",
		"⇝": "zigrarr",
		"𝕫": "zopf",
		"𝒵": "Zscr",
		"𝓏": "zscr",
		"‍": "zwj",
		"‌": "zwnj"
	};
	htmlOutput = "";
	for (var i = 0; i < htmlInput.length; i++) {
		var cInput = htmlInput.charAt(i);
		if (listEncode[cInput]) {
			htmlOutput += "&"+listEncode[cInput]+";";
		} else {
			htmlOutput += cInput;
		}
	}
	return htmlOutput;
};
BF.HtmlCharsDecode     = function(htmlInput)                         {
	var listDecode = {
		Aacute: "Á",
		aacute: "á",
		Abreve: "Ă",
		abreve: "ă",
		ac: "∾",
		acd: "∿",
		acE: "∾̳",
		Acirc: "Â",
		acirc: "â",
		acute: "´",
		Acy: "А",
		acy: "а",
		AElig: "Æ",
		aelig: "æ",
		af: "⁡",
		Afr: "𝔄",
		afr: "𝔞",
		Agrave: "À",
		agrave: "à",
		alefsym: "ℵ",
		aleph: "ℵ",
		Alpha: "Α",
		alpha: "α",
		Amacr: "Ā",
		amacr: "ā",
		amalg: "⨿",
		amp: "&",
		AMP: "&",
		andand: "⩕",
		And: "⩓",
		and: "∧",
		andd: "⩜",
		andslope: "⩘",
		andv: "⩚",
		ang: "∠",
		ange: "⦤",
		angle: "∠",
		angmsdaa: "⦨",
		angmsdab: "⦩",
		angmsdac: "⦪",
		angmsdad: "⦫",
		angmsdae: "⦬",
		angmsdaf: "⦭",
		angmsdag: "⦮",
		angmsdah: "⦯",
		angmsd: "∡",
		angrt: "∟",
		angrtvb: "⊾",
		angrtvbd: "⦝",
		angsph: "∢",
		angst: "Å",
		angzarr: "⍼",
		Aogon: "Ą",
		aogon: "ą",
		Aopf: "𝔸",
		aopf: "𝕒",
		apacir: "⩯",
		ap: "≈",
		apE: "⩰",
		ape: "≊",
		apid: "≋",
		apos: "'",
		ApplyFunction: "⁡",
		approx: "≈",
		approxeq: "≊",
		Aring: "Å",
		aring: "å",
		Ascr: "𝒜",
		ascr: "𝒶",
		Assign: "≔",
		ast: "*",
		asymp: "≈",
		asympeq: "≍",
		Atilde: "Ã",
		atilde: "ã",
		Auml: "Ä",
		auml: "ä",
		awconint: "∳",
		awint: "⨑",
		backcong: "≌",
		backepsilon: "϶",
		backprime: "‵",
		backsim: "∽",
		backsimeq: "⋍",
		Backslash: "∖",
		Barv: "⫧",
		barvee: "⊽",
		barwed: "⌅",
		Barwed: "⌆",
		barwedge: "⌅",
		bbrk: "⎵",
		bbrktbrk: "⎶",
		bcong: "≌",
		Bcy: "Б",
		bcy: "б",
		bdquo: "„",
		becaus: "∵",
		because: "∵",
		Because: "∵",
		bemptyv: "⦰",
		bepsi: "϶",
		bernou: "ℬ",
		Bernoullis: "ℬ",
		Beta: "Β",
		beta: "β",
		beth: "ℶ",
		between: "≬",
		Bfr: "𝔅",
		bfr: "𝔟",
		bigcap: "⋂",
		bigcirc: "◯",
		bigcup: "⋃",
		bigodot: "⨀",
		bigoplus: "⨁",
		bigotimes: "⨂",
		bigsqcup: "⨆",
		bigstar: "★",
		bigtriangledown: "▽",
		bigtriangleup: "△",
		biguplus: "⨄",
		bigvee: "⋁",
		bigwedge: "⋀",
		bkarow: "⤍",
		blacklozenge: "⧫",
		blacksquare: "▪",
		blacktriangle: "▴",
		blacktriangledown: "▾",
		blacktriangleleft: "◂",
		blacktriangleright: "▸",
		blank: "␣",
		blk12: "▒",
		blk14: "░",
		blk34: "▓",
		block: "█",
		bne: "=⃥",
		bnequiv: "≡⃥",
		bNot: "⫭",
		bnot: "⌐",
		Bopf: "𝔹",
		bopf: "𝕓",
		bot: "⊥",
		bottom: "⊥",
		bowtie: "⋈",
		boxbox: "⧉",
		boxdl: "┐",
		boxdL: "╕",
		boxDl: "╖",
		boxDL: "╗",
		boxdr: "┌",
		boxdR: "╒",
		boxDr: "╓",
		boxDR: "╔",
		boxh: "─",
		boxH: "═",
		boxhd: "┬",
		boxHd: "╤",
		boxhD: "╥",
		boxHD: "╦",
		boxhu: "┴",
		boxHu: "╧",
		boxhU: "╨",
		boxHU: "╩",
		boxminus: "⊟",
		boxplus: "⊞",
		boxtimes: "⊠",
		boxul: "┘",
		boxuL: "╛",
		boxUl: "╜",
		boxUL: "╝",
		boxur: "└",
		boxuR: "╘",
		boxUr: "╙",
		boxUR: "╚",
		boxv: "│",
		boxV: "║",
		boxvh: "┼",
		boxvH: "╪",
		boxVh: "╫",
		boxVH: "╬",
		boxvl: "┤",
		boxvL: "╡",
		boxVl: "╢",
		boxVL: "╣",
		boxvr: "├",
		boxvR: "╞",
		boxVr: "╟",
		boxVR: "╠",
		bprime: "‵",
		breve: "˘",
		Breve: "˘",
		brvbar: "¦",
		bscr: "𝒷",
		Bscr: "ℬ",
		bsemi: "⁏",
		bsim: "∽",
		bsime: "⋍",
		bsolb: "⧅",
		bsol: "\\",
		bsolhsub: "⟈",
		bull: "•",
		bullet: "•",
		bump: "≎",
		bumpE: "⪮",
		bumpe: "≏",
		Bumpeq: "≎",
		bumpeq: "≏",
		Cacute: "Ć",
		cacute: "ć",
		capand: "⩄",
		capbrcup: "⩉",
		capcap: "⩋",
		cap: "∩",
		Cap: "⋒",
		capcup: "⩇",
		capdot: "⩀",
		CapitalDifferentialD: "ⅅ",
		caps: "∩︀",
		caret: "⁁",
		caron: "ˇ",
		Cayleys: "ℭ",
		ccaps: "⩍",
		Ccaron: "Č",
		ccaron: "č",
		Ccedil: "Ç",
		ccedil: "ç",
		Ccirc: "Ĉ",
		ccirc: "ĉ",
		Cconint: "∰",
		ccups: "⩌",
		ccupssm: "⩐",
		Cdot: "Ċ",
		cdot: "ċ",
		cedil: "¸",
		Cedilla: "¸",
		cemptyv: "⦲",
		cent: "¢",
		centerdot: "·",
		CenterDot: "·",
		cfr: "𝔠",
		Cfr: "ℭ",
		CHcy: "Ч",
		chcy: "ч",
		check: "✓",
		checkmark: "✓",
		Chi: "Χ",
		chi: "χ",
		circ: "ˆ",
		circeq: "≗",
		circlearrowleft: "↺",
		circlearrowright: "↻",
		circledast: "⊛",
		circledcirc: "⊚",
		circleddash: "⊝",
		CircleDot: "⊙",
		circledR: "®",
		circledS: "Ⓢ",
		CircleMinus: "⊖",
		CirclePlus: "⊕",
		CircleTimes: "⊗",
		cir: "○",
		cirE: "⧃",
		cire: "≗",
		cirfnint: "⨐",
		cirmid: "⫯",
		cirscir: "⧂",
		ClockwiseContourIntegral: "∲",
		CloseCurlyDoubleQuote: "”",
		CloseCurlyQuote: "’",
		clubs: "♣",
		clubsuit: "♣",
		colon: ":",
		Colon: "∷",
		Colone: "⩴",
		colone: "≔",
		coloneq: "≔",
		comma: ",",
		commat: "@",
		comp: "∁",
		compfn: "∘",
		complement: "∁",
		complexes: "ℂ",
		cong: "≅",
		congdot: "⩭",
		Congruent: "≡",
		conint: "∮",
		Conint: "∯",
		ContourIntegral: "∮",
		copf: "𝕔",
		Copf: "ℂ",
		coprod: "∐",
		Coproduct: "∐",
		copy: "©",
		COPY: "©",
		copysr: "℗",
		CounterClockwiseContourIntegral: "∳",
		crarr: "↵",
		cross: "✗",
		Cross: "⨯",
		Cscr: "𝒞",
		cscr: "𝒸",
		csub: "⫏",
		csube: "⫑",
		csup: "⫐",
		csupe: "⫒",
		ctdot: "⋯",
		cudarrl: "⤸",
		cudarrr: "⤵",
		cuepr: "⋞",
		cuesc: "⋟",
		cularr: "↶",
		cularrp: "⤽",
		cupbrcap: "⩈",
		cupcap: "⩆",
		CupCap: "≍",
		cup: "∪",
		Cup: "⋓",
		cupcup: "⩊",
		cupdot: "⊍",
		cupor: "⩅",
		cups: "∪︀",
		curarr: "↷",
		curarrm: "⤼",
		curlyeqprec: "⋞",
		curlyeqsucc: "⋟",
		curlyvee: "⋎",
		curlywedge: "⋏",
		curren: "¤",
		curvearrowleft: "↶",
		curvearrowright: "↷",
		cuvee: "⋎",
		cuwed: "⋏",
		cwconint: "∲",
		cwint: "∱",
		cylcty: "⌭",
		dagger: "†",
		Dagger: "‡",
		daleth: "ℸ",
		darr: "↓",
		Darr: "↡",
		dArr: "⇓",
		dash: "‐",
		Dashv: "⫤",
		dashv: "⊣",
		dbkarow: "⤏",
		dblac: "˝",
		Dcaron: "Ď",
		dcaron: "ď",
		Dcy: "Д",
		dcy: "д",
		ddagger: "‡",
		ddarr: "⇊",
		DD: "ⅅ",
		dd: "ⅆ",
		DDotrahd: "⤑",
		ddotseq: "⩷",
		deg: "°",
		Del: "∇",
		Delta: "Δ",
		delta: "δ",
		demptyv: "⦱",
		dfisht: "⥿",
		Dfr: "𝔇",
		dfr: "𝔡",
		dHar: "⥥",
		dharl: "⇃",
		dharr: "⇂",
		DiacriticalAcute: "´",
		DiacriticalDot: "˙",
		DiacriticalDoubleAcute: "˝",
		DiacriticalGrave: "`",
		DiacriticalTilde: "˜",
		diam: "⋄",
		diamond: "⋄",
		Diamond: "⋄",
		diamondsuit: "♦",
		diams: "♦",
		die: "¨",
		DifferentialD: "ⅆ",
		digamma: "ϝ",
		disin: "⋲",
		div: "÷",
		divide: "÷",
		divideontimes: "⋇",
		divonx: "⋇",
		DJcy: "Ђ",
		djcy: "ђ",
		dlcorn: "⌞",
		dlcrop: "⌍",
		dollar: "$",
		Dopf: "𝔻",
		dopf: "𝕕",
		Dot: "¨",
		dot: "˙",
		DotDot: "⃜",
		doteq: "≐",
		doteqdot: "≑",
		DotEqual: "≐",
		dotminus: "∸",
		dotplus: "∔",
		dotsquare: "⊡",
		doublebarwedge: "⌆",
		DoubleContourIntegral: "∯",
		DoubleDot: "¨",
		DoubleDownArrow: "⇓",
		DoubleLeftArrow: "⇐",
		DoubleLeftRightArrow: "⇔",
		DoubleLeftTee: "⫤",
		DoubleLongLeftArrow: "⟸",
		DoubleLongLeftRightArrow: "⟺",
		DoubleLongRightArrow: "⟹",
		DoubleRightArrow: "⇒",
		DoubleRightTee: "⊨",
		DoubleUpArrow: "⇑",
		DoubleUpDownArrow: "⇕",
		DoubleVerticalBar: "∥",
		DownArrowBar: "⤓",
		downarrow: "↓",
		DownArrow: "↓",
		Downarrow: "⇓",
		DownArrowUpArrow: "⇵",
		DownBreve: "̑",
		downdownarrows: "⇊",
		downharpoonleft: "⇃",
		downharpoonright: "⇂",
		DownLeftRightVector: "⥐",
		DownLeftTeeVector: "⥞",
		DownLeftVectorBar: "⥖",
		DownLeftVector: "↽",
		DownRightTeeVector: "⥟",
		DownRightVectorBar: "⥗",
		DownRightVector: "⇁",
		DownTeeArrow: "↧",
		DownTee: "⊤",
		drbkarow: "⤐",
		drcorn: "⌟",
		drcrop: "⌌",
		Dscr: "𝒟",
		dscr: "𝒹",
		DScy: "Ѕ",
		dscy: "ѕ",
		dsol: "⧶",
		Dstrok: "Đ",
		dstrok: "đ",
		dtdot: "⋱",
		dtri: "▿",
		dtrif: "▾",
		duarr: "⇵",
		duhar: "⥯",
		dwangle: "⦦",
		DZcy: "Џ",
		dzcy: "џ",
		dzigrarr: "⟿",
		Eacute: "É",
		eacute: "é",
		easter: "⩮",
		Ecaron: "Ě",
		ecaron: "ě",
		Ecirc: "Ê",
		ecirc: "ê",
		ecir: "≖",
		ecolon: "≕",
		Ecy: "Э",
		ecy: "э",
		eDDot: "⩷",
		Edot: "Ė",
		edot: "ė",
		eDot: "≑",
		ee: "ⅇ",
		efDot: "≒",
		Efr: "𝔈",
		efr: "𝔢",
		eg: "⪚",
		Egrave: "È",
		egrave: "è",
		egs: "⪖",
		egsdot: "⪘",
		el: "⪙",
		Element: "∈",
		elinters: "⏧",
		ell: "ℓ",
		els: "⪕",
		elsdot: "⪗",
		Emacr: "Ē",
		emacr: "ē",
		empty: "∅",
		emptyset: "∅",
		EmptySmallSquare: "◻",
		emptyv: "∅",
		EmptyVerySmallSquare: "▫",
		emsp13: " ",
		emsp14: " ",
		emsp: " ",
		ENG: "Ŋ",
		eng: "ŋ",
		ensp: " ",
		Eogon: "Ę",
		eogon: "ę",
		Eopf: "𝔼",
		eopf: "𝕖",
		epar: "⋕",
		eparsl: "⧣",
		eplus: "⩱",
		epsi: "ε",
		Epsilon: "Ε",
		epsilon: "ε",
		epsiv: "ϵ",
		eqcirc: "≖",
		eqcolon: "≕",
		eqsim: "≂",
		eqslantgtr: "⪖",
		eqslantless: "⪕",
		Equal: "⩵",
		equals: "=",
		EqualTilde: "≂",
		equest: "≟",
		Equilibrium: "⇌",
		equiv: "≡",
		equivDD: "⩸",
		eqvparsl: "⧥",
		erarr: "⥱",
		erDot: "≓",
		escr: "ℯ",
		Escr: "ℰ",
		esdot: "≐",
		Esim: "⩳",
		esim: "≂",
		Eta: "Η",
		eta: "η",
		ETH: "Ð",
		eth: "ð",
		Euml: "Ë",
		euml: "ë",
		euro: "€",
		excl: "!",
		exist: "∃",
		Exists: "∃",
		expectation: "ℰ",
		exponentiale: "ⅇ",
		ExponentialE: "ⅇ",
		fallingdotseq: "≒",
		Fcy: "Ф",
		fcy: "ф",
		female: "♀",
		ffilig: "ﬃ",
		fflig: "ﬀ",
		ffllig: "ﬄ",
		Ffr: "𝔉",
		ffr: "𝔣",
		filig: "ﬁ",
		FilledSmallSquare: "◼",
		FilledVerySmallSquare: "▪",
		fjlig: "fj",
		flat: "♭",
		fllig: "ﬂ",
		fltns: "▱",
		fnof: "ƒ",
		Fopf: "𝔽",
		fopf: "𝕗",
		forall: "∀",
		ForAll: "∀",
		fork: "⋔",
		forkv: "⫙",
		Fouriertrf: "ℱ",
		fpartint: "⨍",
		frac12: "½",
		frac13: "⅓",
		frac14: "¼",
		frac15: "⅕",
		frac16: "⅙",
		frac18: "⅛",
		frac23: "⅔",
		frac25: "⅖",
		frac34: "¾",
		frac35: "⅗",
		frac38: "⅜",
		frac45: "⅘",
		frac56: "⅚",
		frac58: "⅝",
		frac78: "⅞",
		frasl: "⁄",
		frown: "⌢",
		fscr: "𝒻",
		Fscr: "ℱ",
		gacute: "ǵ",
		Gamma: "Γ",
		gamma: "γ",
		Gammad: "Ϝ",
		gammad: "ϝ",
		gap: "⪆",
		Gbreve: "Ğ",
		gbreve: "ğ",
		Gcedil: "Ģ",
		Gcirc: "Ĝ",
		gcirc: "ĝ",
		Gcy: "Г",
		gcy: "г",
		Gdot: "Ġ",
		gdot: "ġ",
		ge: "≥",
		gE: "≧",
		gEl: "⪌",
		gel: "⋛",
		geq: "≥",
		geqq: "≧",
		geqslant: "⩾",
		gescc: "⪩",
		ges: "⩾",
		gesdot: "⪀",
		gesdoto: "⪂",
		gesdotol: "⪄",
		gesl: "⋛︀",
		gesles: "⪔",
		Gfr: "𝔊",
		gfr: "𝔤",
		gg: "≫",
		Gg: "⋙",
		ggg: "⋙",
		gimel: "ℷ",
		GJcy: "Ѓ",
		gjcy: "ѓ",
		gla: "⪥",
		gl: "≷",
		glE: "⪒",
		glj: "⪤",
		gnap: "⪊",
		gnapprox: "⪊",
		gne: "⪈",
		gnE: "≩",
		gneq: "⪈",
		gneqq: "≩",
		gnsim: "⋧",
		Gopf: "𝔾",
		gopf: "𝕘",
		grave: "`",
		GreaterEqual: "≥",
		GreaterEqualLess: "⋛",
		GreaterFullEqual: "≧",
		GreaterGreater: "⪢",
		GreaterLess: "≷",
		GreaterSlantEqual: "⩾",
		GreaterTilde: "≳",
		Gscr: "𝒢",
		gscr: "ℊ",
		gsim: "≳",
		gsime: "⪎",
		gsiml: "⪐",
		gtcc: "⪧",
		gtcir: "⩺",
		gt: ">",
		GT: ">",
		Gt: "≫",
		gtdot: "⋗",
		gtlPar: "⦕",
		gtquest: "⩼",
		gtrapprox: "⪆",
		gtrarr: "⥸",
		gtrdot: "⋗",
		gtreqless: "⋛",
		gtreqqless: "⪌",
		gtrless: "≷",
		gtrsim: "≳",
		gvertneqq: "≩︀",
		gvnE: "≩︀",
		Hacek: "ˇ",
		hairsp: " ",
		half: "½",
		hamilt: "ℋ",
		HARDcy: "Ъ",
		hardcy: "ъ",
		harrcir: "⥈",
		harr: "↔",
		hArr: "⇔",
		harrw: "↭",
		Hat: "^",
		hbar: "ℏ",
		Hcirc: "Ĥ",
		hcirc: "ĥ",
		hearts: "♥",
		heartsuit: "♥",
		hellip: "…",
		hercon: "⊹",
		hfr: "𝔥",
		Hfr: "ℌ",
		HilbertSpace: "ℋ",
		hksearow: "⤥",
		hkswarow: "⤦",
		hoarr: "⇿",
		homtht: "∻",
		hookleftarrow: "↩",
		hookrightarrow: "↪",
		hopf: "𝕙",
		Hopf: "ℍ",
		horbar: "―",
		HorizontalLine: "─",
		hscr: "𝒽",
		Hscr: "ℋ",
		hslash: "ℏ",
		Hstrok: "Ħ",
		hstrok: "ħ",
		HumpDownHump: "≎",
		HumpEqual: "≏",
		hybull: "⁃",
		hyphen: "‐",
		Iacute: "Í",
		iacute: "í",
		ic: "⁣",
		Icirc: "Î",
		icirc: "î",
		Icy: "И",
		icy: "и",
		Idot: "İ",
		IEcy: "Е",
		iecy: "е",
		iexcl: "¡",
		iff: "⇔",
		ifr: "𝔦",
		Ifr: "ℑ",
		Igrave: "Ì",
		igrave: "ì",
		ii: "ⅈ",
		iiiint: "⨌",
		iiint: "∭",
		iinfin: "⧜",
		iiota: "℩",
		IJlig: "Ĳ",
		ijlig: "ĳ",
		Imacr: "Ī",
		imacr: "ī",
		image: "ℑ",
		ImaginaryI: "ⅈ",
		imagline: "ℐ",
		imagpart: "ℑ",
		imath: "ı",
		Im: "ℑ",
		imof: "⊷",
		imped: "Ƶ",
		Implies: "⇒",
		incare: "℅",
		"in": "∈",
		infin: "∞",
		infintie: "⧝",
		inodot: "ı",
		intcal: "⊺",
		"int": "∫",
		Int: "∬",
		integers: "ℤ",
		Integral: "∫",
		intercal: "⊺",
		Intersection: "⋂",
		intlarhk: "⨗",
		intprod: "⨼",
		InvisibleComma: "⁣",
		InvisibleTimes: "⁢",
		IOcy: "Ё",
		iocy: "ё",
		Iogon: "Į",
		iogon: "į",
		Iopf: "𝕀",
		iopf: "𝕚",
		Iota: "Ι",
		iota: "ι",
		iprod: "⨼",
		iquest: "¿",
		iscr: "𝒾",
		Iscr: "ℐ",
		isin: "∈",
		isindot: "⋵",
		isinE: "⋹",
		isins: "⋴",
		isinsv: "⋳",
		isinv: "∈",
		it: "⁢",
		Itilde: "Ĩ",
		itilde: "ĩ",
		Iukcy: "І",
		iukcy: "і",
		Iuml: "Ï",
		iuml: "ï",
		Jcirc: "Ĵ",
		jcirc: "ĵ",
		Jcy: "Й",
		jcy: "й",
		Jfr: "𝔍",
		jfr: "𝔧",
		jmath: "ȷ",
		Jopf: "𝕁",
		jopf: "𝕛",
		Jscr: "𝒥",
		jscr: "𝒿",
		Jsercy: "Ј",
		jsercy: "ј",
		Jukcy: "Є",
		jukcy: "є",
		Kappa: "Κ",
		kappa: "κ",
		kappav: "ϰ",
		Kcedil: "Ķ",
		kcedil: "ķ",
		Kcy: "К",
		kcy: "к",
		Kfr: "𝔎",
		kfr: "𝔨",
		kgreen: "ĸ",
		KHcy: "Х",
		khcy: "х",
		KJcy: "Ќ",
		kjcy: "ќ",
		Kopf: "𝕂",
		kopf: "𝕜",
		Kscr: "𝒦",
		kscr: "𝓀",
		lAarr: "⇚",
		Lacute: "Ĺ",
		lacute: "ĺ",
		laemptyv: "⦴",
		lagran: "ℒ",
		Lambda: "Λ",
		lambda: "λ",
		lang: "⟨",
		Lang: "⟪",
		langd: "⦑",
		langle: "⟨",
		lap: "⪅",
		Laplacetrf: "ℒ",
		laquo: "«",
		larrb: "⇤",
		larrbfs: "⤟",
		larr: "←",
		Larr: "↞",
		lArr: "⇐",
		larrfs: "⤝",
		larrhk: "↩",
		larrlp: "↫",
		larrpl: "⤹",
		larrsim: "⥳",
		larrtl: "↢",
		latail: "⤙",
		lAtail: "⤛",
		lat: "⪫",
		late: "⪭",
		lates: "⪭︀",
		lbarr: "⤌",
		lBarr: "⤎",
		lbbrk: "❲",
		lbrace: "{",
		lbrack: "[",
		lbrke: "⦋",
		lbrksld: "⦏",
		lbrkslu: "⦍",
		Lcaron: "Ľ",
		lcaron: "ľ",
		Lcedil: "Ļ",
		lcedil: "ļ",
		lceil: "⌈",
		lcub: "{",
		Lcy: "Л",
		lcy: "л",
		ldca: "⤶",
		ldquo: "“",
		ldquor: "„",
		ldrdhar: "⥧",
		ldrushar: "⥋",
		ldsh: "↲",
		le: "≤",
		lE: "≦",
		LeftAngleBracket: "⟨",
		LeftArrowBar: "⇤",
		leftarrow: "←",
		LeftArrow: "←",
		Leftarrow: "⇐",
		LeftArrowRightArrow: "⇆",
		leftarrowtail: "↢",
		LeftCeiling: "⌈",
		LeftDoubleBracket: "⟦",
		LeftDownTeeVector: "⥡",
		LeftDownVectorBar: "⥙",
		LeftDownVector: "⇃",
		LeftFloor: "⌊",
		leftharpoondown: "↽",
		leftharpoonup: "↼",
		leftleftarrows: "⇇",
		leftrightarrow: "↔",
		LeftRightArrow: "↔",
		Leftrightarrow: "⇔",
		leftrightarrows: "⇆",
		leftrightharpoons: "⇋",
		leftrightsquigarrow: "↭",
		LeftRightVector: "⥎",
		LeftTeeArrow: "↤",
		LeftTee: "⊣",
		LeftTeeVector: "⥚",
		leftthreetimes: "⋋",
		LeftTriangleBar: "⧏",
		LeftTriangle: "⊲",
		LeftTriangleEqual: "⊴",
		LeftUpDownVector: "⥑",
		LeftUpTeeVector: "⥠",
		LeftUpVectorBar: "⥘",
		LeftUpVector: "↿",
		LeftVectorBar: "⥒",
		LeftVector: "↼",
		lEg: "⪋",
		leg: "⋚",
		leq: "≤",
		leqq: "≦",
		leqslant: "⩽",
		lescc: "⪨",
		les: "⩽",
		lesdot: "⩿",
		lesdoto: "⪁",
		lesdotor: "⪃",
		lesg: "⋚︀",
		lesges: "⪓",
		lessapprox: "⪅",
		lessdot: "⋖",
		lesseqgtr: "⋚",
		lesseqqgtr: "⪋",
		LessEqualGreater: "⋚",
		LessFullEqual: "≦",
		LessGreater: "≶",
		lessgtr: "≶",
		LessLess: "⪡",
		lesssim: "≲",
		LessSlantEqual: "⩽",
		LessTilde: "≲",
		lfisht: "⥼",
		lfloor: "⌊",
		Lfr: "𝔏",
		lfr: "𝔩",
		lg: "≶",
		lgE: "⪑",
		lHar: "⥢",
		lhard: "↽",
		lharu: "↼",
		lharul: "⥪",
		lhblk: "▄",
		LJcy: "Љ",
		ljcy: "љ",
		llarr: "⇇",
		ll: "≪",
		Ll: "⋘",
		llcorner: "⌞",
		Lleftarrow: "⇚",
		llhard: "⥫",
		lltri: "◺",
		Lmidot: "Ŀ",
		lmidot: "ŀ",
		lmoustache: "⎰",
		lmoust: "⎰",
		lnap: "⪉",
		lnapprox: "⪉",
		lne: "⪇",
		lnE: "≨",
		lneq: "⪇",
		lneqq: "≨",
		lnsim: "⋦",
		loang: "⟬",
		loarr: "⇽",
		lobrk: "⟦",
		longleftarrow: "⟵",
		LongLeftArrow: "⟵",
		Longleftarrow: "⟸",
		longleftrightarrow: "⟷",
		LongLeftRightArrow: "⟷",
		Longleftrightarrow: "⟺",
		longmapsto: "⟼",
		longrightarrow: "⟶",
		LongRightArrow: "⟶",
		Longrightarrow: "⟹",
		looparrowleft: "↫",
		looparrowright: "↬",
		lopar: "⦅",
		Lopf: "𝕃",
		lopf: "𝕝",
		loplus: "⨭",
		lotimes: "⨴",
		lowast: "∗",
		lowbar: "_",
		LowerLeftArrow: "↙",
		LowerRightArrow: "↘",
		loz: "◊",
		lozenge: "◊",
		lozf: "⧫",
		lpar: "(",
		lparlt: "⦓",
		lrarr: "⇆",
		lrcorner: "⌟",
		lrhar: "⇋",
		lrhard: "⥭",
		lrm: "‎",
		lrtri: "⊿",
		lsaquo: "‹",
		lscr: "𝓁",
		Lscr: "ℒ",
		lsh: "↰",
		Lsh: "↰",
		lsim: "≲",
		lsime: "⪍",
		lsimg: "⪏",
		lsqb: "[",
		lsquo: "‘",
		lsquor: "‚",
		Lstrok: "Ł",
		lstrok: "ł",
		ltcc: "⪦",
		ltcir: "⩹",
		lt: "<",
		LT: "<",
		Lt: "≪",
		ltdot: "⋖",
		lthree: "⋋",
		ltimes: "⋉",
		ltlarr: "⥶",
		ltquest: "⩻",
		ltri: "◃",
		ltrie: "⊴",
		ltrif: "◂",
		ltrPar: "⦖",
		lurdshar: "⥊",
		luruhar: "⥦",
		lvertneqq: "≨︀",
		lvnE: "≨︀",
		macr: "¯",
		male: "♂",
		malt: "✠",
		maltese: "✠",
		Map: "⤅",
		map: "↦",
		mapsto: "↦",
		mapstodown: "↧",
		mapstoleft: "↤",
		mapstoup: "↥",
		marker: "▮",
		mcomma: "⨩",
		Mcy: "М",
		mcy: "м",
		mdash: "—",
		mDDot: "∺",
		measuredangle: "∡",
		MediumSpace: " ",
		Mellintrf: "ℳ",
		Mfr: "𝔐",
		mfr: "𝔪",
		mho: "℧",
		micro: "µ",
		midast: "*",
		midcir: "⫰",
		mid: "∣",
		middot: "·",
		minusb: "⊟",
		minus: "−",
		minusd: "∸",
		minusdu: "⨪",
		MinusPlus: "∓",
		mlcp: "⫛",
		mldr: "…",
		mnplus: "∓",
		models: "⊧",
		Mopf: "𝕄",
		mopf: "𝕞",
		mp: "∓",
		mscr: "𝓂",
		Mscr: "ℳ",
		mstpos: "∾",
		Mu: "Μ",
		mu: "μ",
		multimap: "⊸",
		mumap: "⊸",
		nabla: "∇",
		Nacute: "Ń",
		nacute: "ń",
		nang: "∠⃒",
		nap: "≉",
		napE: "⩰̸",
		napid: "≋̸",
		napos: "ŉ",
		napprox: "≉",
		natural: "♮",
		naturals: "ℕ",
		natur: "♮",
		nbsp: " ",
		nbump: "≎̸",
		nbumpe: "≏̸",
		ncap: "⩃",
		Ncaron: "Ň",
		ncaron: "ň",
		Ncedil: "Ņ",
		ncedil: "ņ",
		ncong: "≇",
		ncongdot: "⩭̸",
		ncup: "⩂",
		Ncy: "Н",
		ncy: "н",
		ndash: "–",
		nearhk: "⤤",
		nearr: "↗",
		neArr: "⇗",
		nearrow: "↗",
		ne: "≠",
		nedot: "≐̸",
		NegativeMediumSpace: "​",
		NegativeThickSpace: "​",
		NegativeThinSpace: "​",
		NegativeVeryThinSpace: "​",
		nequiv: "≢",
		nesear: "⤨",
		nesim: "≂̸",
		NestedGreaterGreater: "≫",
		NestedLessLess: "≪",
		NewLine: "\n",
		nexist: "∄",
		nexists: "∄",
		Nfr: "𝔑",
		nfr: "𝔫",
		ngE: "≧̸",
		nge: "≱",
		ngeq: "≱",
		ngeqq: "≧̸",
		ngeqslant: "⩾̸",
		nges: "⩾̸",
		nGg: "⋙̸",
		ngsim: "≵",
		nGt: "≫⃒",
		ngt: "≯",
		ngtr: "≯",
		nGtv: "≫̸",
		nharr: "↮",
		nhArr: "⇎",
		nhpar: "⫲",
		ni: "∋",
		nis: "⋼",
		nisd: "⋺",
		niv: "∋",
		NJcy: "Њ",
		njcy: "њ",
		nlarr: "↚",
		nlArr: "⇍",
		nldr: "‥",
		nlE: "≦̸",
		nle: "≰",
		nleftarrow: "↚",
		nLeftarrow: "⇍",
		nleftrightarrow: "↮",
		nLeftrightarrow: "⇎",
		nleq: "≰",
		nleqq: "≦̸",
		nleqslant: "⩽̸",
		nles: "⩽̸",
		nless: "≮",
		nLl: "⋘̸",
		nlsim: "≴",
		nLt: "≪⃒",
		nlt: "≮",
		nltri: "⋪",
		nltrie: "⋬",
		nLtv: "≪̸",
		nmid: "∤",
		NoBreak: "⁠",
		NonBreakingSpace: " ",
		nopf: "𝕟",
		Nopf: "ℕ",
		Not: "⫬",
		not: "¬",
		NotCongruent: "≢",
		NotCupCap: "≭",
		NotDoubleVerticalBar: "∦",
		NotElement: "∉",
		NotEqual: "≠",
		NotEqualTilde: "≂̸",
		NotExists: "∄",
		NotGreater: "≯",
		NotGreaterEqual: "≱",
		NotGreaterFullEqual: "≧̸",
		NotGreaterGreater: "≫̸",
		NotGreaterLess: "≹",
		NotGreaterSlantEqual: "⩾̸",
		NotGreaterTilde: "≵",
		NotHumpDownHump: "≎̸",
		NotHumpEqual: "≏̸",
		notin: "∉",
		notindot: "⋵̸",
		notinE: "⋹̸",
		notinva: "∉",
		notinvb: "⋷",
		notinvc: "⋶",
		NotLeftTriangleBar: "⧏̸",
		NotLeftTriangle: "⋪",
		NotLeftTriangleEqual: "⋬",
		NotLess: "≮",
		NotLessEqual: "≰",
		NotLessGreater: "≸",
		NotLessLess: "≪̸",
		NotLessSlantEqual: "⩽̸",
		NotLessTilde: "≴",
		NotNestedGreaterGreater: "⪢̸",
		NotNestedLessLess: "⪡̸",
		notni: "∌",
		notniva: "∌",
		notnivb: "⋾",
		notnivc: "⋽",
		NotPrecedes: "⊀",
		NotPrecedesEqual: "⪯̸",
		NotPrecedesSlantEqual: "⋠",
		NotReverseElement: "∌",
		NotRightTriangleBar: "⧐̸",
		NotRightTriangle: "⋫",
		NotRightTriangleEqual: "⋭",
		NotSquareSubset: "⊏̸",
		NotSquareSubsetEqual: "⋢",
		NotSquareSuperset: "⊐̸",
		NotSquareSupersetEqual: "⋣",
		NotSubset: "⊂⃒",
		NotSubsetEqual: "⊈",
		NotSucceeds: "⊁",
		NotSucceedsEqual: "⪰̸",
		NotSucceedsSlantEqual: "⋡",
		NotSucceedsTilde: "≿̸",
		NotSuperset: "⊃⃒",
		NotSupersetEqual: "⊉",
		NotTilde: "≁",
		NotTildeEqual: "≄",
		NotTildeFullEqual: "≇",
		NotTildeTilde: "≉",
		NotVerticalBar: "∤",
		nparallel: "∦",
		npar: "∦",
		nparsl: "⫽⃥",
		npart: "∂̸",
		npolint: "⨔",
		npr: "⊀",
		nprcue: "⋠",
		nprec: "⊀",
		npreceq: "⪯̸",
		npre: "⪯̸",
		nrarrc: "⤳̸",
		nrarr: "↛",
		nrArr: "⇏",
		nrarrw: "↝̸",
		nrightarrow: "↛",
		nRightarrow: "⇏",
		nrtri: "⋫",
		nrtrie: "⋭",
		nsc: "⊁",
		nsccue: "⋡",
		nsce: "⪰̸",
		Nscr: "𝒩",
		nscr: "𝓃",
		nshortmid: "∤",
		nshortparallel: "∦",
		nsim: "≁",
		nsime: "≄",
		nsimeq: "≄",
		nsmid: "∤",
		nspar: "∦",
		nsqsube: "⋢",
		nsqsupe: "⋣",
		nsub: "⊄",
		nsubE: "⫅̸",
		nsube: "⊈",
		nsubset: "⊂⃒",
		nsubseteq: "⊈",
		nsubseteqq: "⫅̸",
		nsucc: "⊁",
		nsucceq: "⪰̸",
		nsup: "⊅",
		nsupE: "⫆̸",
		nsupe: "⊉",
		nsupset: "⊃⃒",
		nsupseteq: "⊉",
		nsupseteqq: "⫆̸",
		ntgl: "≹",
		Ntilde: "Ñ",
		ntilde: "ñ",
		ntlg: "≸",
		ntriangleleft: "⋪",
		ntrianglelefteq: "⋬",
		ntriangleright: "⋫",
		ntrianglerighteq: "⋭",
		Nu: "Ν",
		nu: "ν",
		num: "#",
		numero: "№",
		numsp: " ",
		nvap: "≍⃒",
		nvdash: "⊬",
		nvDash: "⊭",
		nVdash: "⊮",
		nVDash: "⊯",
		nvge: "≥⃒",
		nvgt: ">⃒",
		nvHarr: "⤄",
		nvinfin: "⧞",
		nvlArr: "⤂",
		nvle: "≤⃒",
		nvlt: "<⃒",
		nvltrie: "⊴⃒",
		nvrArr: "⤃",
		nvrtrie: "⊵⃒",
		nvsim: "∼⃒",
		nwarhk: "⤣",
		nwarr: "↖",
		nwArr: "⇖",
		nwarrow: "↖",
		nwnear: "⤧",
		Oacute: "Ó",
		oacute: "ó",
		oast: "⊛",
		Ocirc: "Ô",
		ocirc: "ô",
		ocir: "⊚",
		Ocy: "О",
		ocy: "о",
		odash: "⊝",
		Odblac: "Ő",
		odblac: "ő",
		odiv: "⨸",
		odot: "⊙",
		odsold: "⦼",
		OElig: "Œ",
		oelig: "œ",
		ofcir: "⦿",
		Ofr: "𝔒",
		ofr: "𝔬",
		ogon: "˛",
		Ograve: "Ò",
		ograve: "ò",
		ogt: "⧁",
		ohbar: "⦵",
		ohm: "Ω",
		oint: "∮",
		olarr: "↺",
		olcir: "⦾",
		olcross: "⦻",
		oline: "‾",
		olt: "⧀",
		Omacr: "Ō",
		omacr: "ō",
		Omega: "Ω",
		omega: "ω",
		Omicron: "Ο",
		omicron: "ο",
		omid: "⦶",
		ominus: "⊖",
		Oopf: "𝕆",
		oopf: "𝕠",
		opar: "⦷",
		OpenCurlyDoubleQuote: "“",
		OpenCurlyQuote: "‘",
		operp: "⦹",
		oplus: "⊕",
		orarr: "↻",
		Or: "⩔",
		or: "∨",
		ord: "⩝",
		order: "ℴ",
		orderof: "ℴ",
		ordf: "ª",
		ordm: "º",
		origof: "⊶",
		oror: "⩖",
		orslope: "⩗",
		orv: "⩛",
		oS: "Ⓢ",
		Oscr: "𝒪",
		oscr: "ℴ",
		Oslash: "Ø",
		oslash: "ø",
		osol: "⊘",
		Otilde: "Õ",
		otilde: "õ",
		otimesas: "⨶",
		Otimes: "⨷",
		otimes: "⊗",
		Ouml: "Ö",
		ouml: "ö",
		ovbar: "⌽",
		OverBar: "‾",
		OverBrace: "⏞",
		OverBracket: "⎴",
		OverParenthesis: "⏜",
		para: "¶",
		parallel: "∥",
		par: "∥",
		parsim: "⫳",
		parsl: "⫽",
		part: "∂",
		PartialD: "∂",
		Pcy: "П",
		pcy: "п",
		percnt: "%",
		period: ".",
		permil: "‰",
		perp: "⊥",
		pertenk: "‱",
		Pfr: "𝔓",
		pfr: "𝔭",
		Phi: "Φ",
		phi: "φ",
		phiv: "ϕ",
		phmmat: "ℳ",
		phone: "☎",
		Pi: "Π",
		pi: "π",
		pitchfork: "⋔",
		piv: "ϖ",
		planck: "ℏ",
		planckh: "ℎ",
		plankv: "ℏ",
		plusacir: "⨣",
		plusb: "⊞",
		pluscir: "⨢",
		plus: "+",
		plusdo: "∔",
		plusdu: "⨥",
		pluse: "⩲",
		PlusMinus: "±",
		plusmn: "±",
		plussim: "⨦",
		plustwo: "⨧",
		pm: "±",
		Poincareplane: "ℌ",
		pointint: "⨕",
		popf: "𝕡",
		Popf: "ℙ",
		pound: "£",
		prap: "⪷",
		Pr: "⪻",
		pr: "≺",
		prcue: "≼",
		precapprox: "⪷",
		prec: "≺",
		preccurlyeq: "≼",
		Precedes: "≺",
		PrecedesEqual: "⪯",
		PrecedesSlantEqual: "≼",
		PrecedesTilde: "≾",
		preceq: "⪯",
		precnapprox: "⪹",
		precneqq: "⪵",
		precnsim: "⋨",
		pre: "⪯",
		prE: "⪳",
		precsim: "≾",
		prime: "′",
		Prime: "″",
		primes: "ℙ",
		prnap: "⪹",
		prnE: "⪵",
		prnsim: "⋨",
		prod: "∏",
		Product: "∏",
		profalar: "⌮",
		profline: "⌒",
		profsurf: "⌓",
		prop: "∝",
		Proportional: "∝",
		Proportion: "∷",
		propto: "∝",
		prsim: "≾",
		prurel: "⊰",
		Pscr: "𝒫",
		pscr: "𝓅",
		Psi: "Ψ",
		psi: "ψ",
		puncsp: " ",
		Qfr: "𝔔",
		qfr: "𝔮",
		qint: "⨌",
		qopf: "𝕢",
		Qopf: "ℚ",
		qprime: "⁗",
		Qscr: "𝒬",
		qscr: "𝓆",
		quaternions: "ℍ",
		quatint: "⨖",
		quest: "?",
		questeq: "≟",
		quot: '"',
		QUOT: '"',
		rAarr: "⇛",
		race: "∽̱",
		Racute: "Ŕ",
		racute: "ŕ",
		radic: "√",
		raemptyv: "⦳",
		rang: "⟩",
		Rang: "⟫",
		rangd: "⦒",
		range: "⦥",
		rangle: "⟩",
		raquo: "»",
		rarrap: "⥵",
		rarrb: "⇥",
		rarrbfs: "⤠",
		rarrc: "⤳",
		rarr: "→",
		Rarr: "↠",
		rArr: "⇒",
		rarrfs: "⤞",
		rarrhk: "↪",
		rarrlp: "↬",
		rarrpl: "⥅",
		rarrsim: "⥴",
		Rarrtl: "⤖",
		rarrtl: "↣",
		rarrw: "↝",
		ratail: "⤚",
		rAtail: "⤜",
		ratio: "∶",
		rationals: "ℚ",
		rbarr: "⤍",
		rBarr: "⤏",
		RBarr: "⤐",
		rbbrk: "❳",
		rbrace: "}",
		rbrack: "]",
		rbrke: "⦌",
		rbrksld: "⦎",
		rbrkslu: "⦐",
		Rcaron: "Ř",
		rcaron: "ř",
		Rcedil: "Ŗ",
		rcedil: "ŗ",
		rceil: "⌉",
		rcub: "}",
		Rcy: "Р",
		rcy: "р",
		rdca: "⤷",
		rdldhar: "⥩",
		rdquo: "”",
		rdquor: "”",
		rdsh: "↳",
		real: "ℜ",
		realine: "ℛ",
		realpart: "ℜ",
		reals: "ℝ",
		Re: "ℜ",
		rect: "▭",
		reg: "®",
		REG: "®",
		ReverseElement: "∋",
		ReverseEquilibrium: "⇋",
		ReverseUpEquilibrium: "⥯",
		rfisht: "⥽",
		rfloor: "⌋",
		rfr: "𝔯",
		Rfr: "ℜ",
		rHar: "⥤",
		rhard: "⇁",
		rharu: "⇀",
		rharul: "⥬",
		Rho: "Ρ",
		rho: "ρ",
		rhov: "ϱ",
		RightAngleBracket: "⟩",
		RightArrowBar: "⇥",
		rightarrow: "→",
		RightArrow: "→",
		Rightarrow: "⇒",
		RightArrowLeftArrow: "⇄",
		rightarrowtail: "↣",
		RightCeiling: "⌉",
		RightDoubleBracket: "⟧",
		RightDownTeeVector: "⥝",
		RightDownVectorBar: "⥕",
		RightDownVector: "⇂",
		RightFloor: "⌋",
		rightharpoondown: "⇁",
		rightharpoonup: "⇀",
		rightleftarrows: "⇄",
		rightleftharpoons: "⇌",
		rightrightarrows: "⇉",
		rightsquigarrow: "↝",
		RightTeeArrow: "↦",
		RightTee: "⊢",
		RightTeeVector: "⥛",
		rightthreetimes: "⋌",
		RightTriangleBar: "⧐",
		RightTriangle: "⊳",
		RightTriangleEqual: "⊵",
		RightUpDownVector: "⥏",
		RightUpTeeVector: "⥜",
		RightUpVectorBar: "⥔",
		RightUpVector: "↾",
		RightVectorBar: "⥓",
		RightVector: "⇀",
		ring: "˚",
		risingdotseq: "≓",
		rlarr: "⇄",
		rlhar: "⇌",
		rlm: "‏",
		rmoustache: "⎱",
		rmoust: "⎱",
		rnmid: "⫮",
		roang: "⟭",
		roarr: "⇾",
		robrk: "⟧",
		ropar: "⦆",
		ropf: "𝕣",
		Ropf: "ℝ",
		roplus: "⨮",
		rotimes: "⨵",
		RoundImplies: "⥰",
		rpar: ")",
		rpargt: "⦔",
		rppolint: "⨒",
		rrarr: "⇉",
		Rrightarrow: "⇛",
		rsaquo: "›",
		rscr: "𝓇",
		Rscr: "ℛ",
		rsh: "↱",
		Rsh: "↱",
		rsqb: "]",
		rsquo: "’",
		rsquor: "’",
		rthree: "⋌",
		rtimes: "⋊",
		rtri: "▹",
		rtrie: "⊵",
		rtrif: "▸",
		rtriltri: "⧎",
		RuleDelayed: "⧴",
		ruluhar: "⥨",
		rx: "℞",
		Sacute: "Ś",
		sacute: "ś",
		sbquo: "‚",
		scap: "⪸",
		Scaron: "Š",
		scaron: "š",
		Sc: "⪼",
		sc: "≻",
		sccue: "≽",
		sce: "⪰",
		scE: "⪴",
		Scedil: "Ş",
		scedil: "ş",
		Scirc: "Ŝ",
		scirc: "ŝ",
		scnap: "⪺",
		scnE: "⪶",
		scnsim: "⋩",
		scpolint: "⨓",
		scsim: "≿",
		Scy: "С",
		scy: "с",
		sdotb: "⊡",
		sdot: "⋅",
		sdote: "⩦",
		searhk: "⤥",
		searr: "↘",
		seArr: "⇘",
		searrow: "↘",
		sect: "§",
		semi: ";",
		seswar: "⤩",
		setminus: "∖",
		setmn: "∖",
		sext: "✶",
		Sfr: "𝔖",
		sfr: "𝔰",
		sfrown: "⌢",
		sharp: "♯",
		SHCHcy: "Щ",
		shchcy: "щ",
		SHcy: "Ш",
		shcy: "ш",
		ShortDownArrow: "↓",
		ShortLeftArrow: "←",
		shortmid: "∣",
		shortparallel: "∥",
		ShortRightArrow: "→",
		ShortUpArrow: "↑",
		shy: "­",
		Sigma: "Σ",
		sigma: "σ",
		sigmaf: "ς",
		sigmav: "ς",
		sim: "∼",
		simdot: "⩪",
		sime: "≃",
		simeq: "≃",
		simg: "⪞",
		simgE: "⪠",
		siml: "⪝",
		simlE: "⪟",
		simne: "≆",
		simplus: "⨤",
		simrarr: "⥲",
		slarr: "←",
		SmallCircle: "∘",
		smallsetminus: "∖",
		smashp: "⨳",
		smeparsl: "⧤",
		smid: "∣",
		smile: "⌣",
		smt: "⪪",
		smte: "⪬",
		smtes: "⪬︀",
		SOFTcy: "Ь",
		softcy: "ь",
		solbar: "⌿",
		solb: "⧄",
		sol: "/",
		Sopf: "𝕊",
		sopf: "𝕤",
		spades: "♠",
		spadesuit: "♠",
		spar: "∥",
		sqcap: "⊓",
		sqcaps: "⊓︀",
		sqcup: "⊔",
		sqcups: "⊔︀",
		Sqrt: "√",
		sqsub: "⊏",
		sqsube: "⊑",
		sqsubset: "⊏",
		sqsubseteq: "⊑",
		sqsup: "⊐",
		sqsupe: "⊒",
		sqsupset: "⊐",
		sqsupseteq: "⊒",
		square: "□",
		Square: "□",
		SquareIntersection: "⊓",
		SquareSubset: "⊏",
		SquareSubsetEqual: "⊑",
		SquareSuperset: "⊐",
		SquareSupersetEqual: "⊒",
		SquareUnion: "⊔",
		squarf: "▪",
		squ: "□",
		squf: "▪",
		srarr: "→",
		Sscr: "𝒮",
		sscr: "𝓈",
		ssetmn: "∖",
		ssmile: "⌣",
		sstarf: "⋆",
		Star: "⋆",
		star: "☆",
		starf: "★",
		straightepsilon: "ϵ",
		straightphi: "ϕ",
		strns: "¯",
		sub: "⊂",
		Sub: "⋐",
		subdot: "⪽",
		subE: "⫅",
		sube: "⊆",
		subedot: "⫃",
		submult: "⫁",
		subnE: "⫋",
		subne: "⊊",
		subplus: "⪿",
		subrarr: "⥹",
		subset: "⊂",
		Subset: "⋐",
		subseteq: "⊆",
		subseteqq: "⫅",
		SubsetEqual: "⊆",
		subsetneq: "⊊",
		subsetneqq: "⫋",
		subsim: "⫇",
		subsub: "⫕",
		subsup: "⫓",
		succapprox: "⪸",
		succ: "≻",
		succcurlyeq: "≽",
		Succeeds: "≻",
		SucceedsEqual: "⪰",
		SucceedsSlantEqual: "≽",
		SucceedsTilde: "≿",
		succeq: "⪰",
		succnapprox: "⪺",
		succneqq: "⪶",
		succnsim: "⋩",
		succsim: "≿",
		SuchThat: "∋",
		sum: "∑",
		Sum: "∑",
		sung: "♪",
		sup1: "¹",
		sup2: "²",
		sup3: "³",
		sup: "⊃",
		Sup: "⋑",
		supdot: "⪾",
		supdsub: "⫘",
		supE: "⫆",
		supe: "⊇",
		supedot: "⫄",
		Superset: "⊃",
		SupersetEqual: "⊇",
		suphsol: "⟉",
		suphsub: "⫗",
		suplarr: "⥻",
		supmult: "⫂",
		supnE: "⫌",
		supne: "⊋",
		supplus: "⫀",
		supset: "⊃",
		Supset: "⋑",
		supseteq: "⊇",
		supseteqq: "⫆",
		supsetneq: "⊋",
		supsetneqq: "⫌",
		supsim: "⫈",
		supsub: "⫔",
		supsup: "⫖",
		swarhk: "⤦",
		swarr: "↙",
		swArr: "⇙",
		swarrow: "↙",
		swnwar: "⤪",
		szlig: "ß",
		Tab: "	",
		target: "⌖",
		Tau: "Τ",
		tau: "τ",
		tbrk: "⎴",
		Tcaron: "Ť",
		tcaron: "ť",
		Tcedil: "Ţ",
		tcedil: "ţ",
		Tcy: "Т",
		tcy: "т",
		tdot: "⃛",
		telrec: "⌕",
		Tfr: "𝔗",
		tfr: "𝔱",
		there4: "∴",
		therefore: "∴",
		Therefore: "∴",
		Theta: "Θ",
		theta: "θ",
		thetasym: "ϑ",
		thetav: "ϑ",
		thickapprox: "≈",
		thicksim: "∼",
		ThickSpace: "  ",
		ThinSpace: " ",
		thinsp: " ",
		thkap: "≈",
		thksim: "∼",
		THORN: "Þ",
		thorn: "þ",
		tilde: "˜",
		Tilde: "∼",
		TildeEqual: "≃",
		TildeFullEqual: "≅",
		TildeTilde: "≈",
		timesbar: "⨱",
		timesb: "⊠",
		times: "×",
		timesd: "⨰",
		tint: "∭",
		toea: "⤨",
		topbot: "⌶",
		topcir: "⫱",
		top: "⊤",
		Topf: "𝕋",
		topf: "𝕥",
		topfork: "⫚",
		tosa: "⤩",
		tprime: "‴",
		trade: "™",
		TRADE: "™",
		triangle: "▵",
		triangledown: "▿",
		triangleleft: "◃",
		trianglelefteq: "⊴",
		triangleq: "≜",
		triangleright: "▹",
		trianglerighteq: "⊵",
		tridot: "◬",
		trie: "≜",
		triminus: "⨺",
		TripleDot: "⃛",
		triplus: "⨹",
		trisb: "⧍",
		tritime: "⨻",
		trpezium: "⏢",
		Tscr: "𝒯",
		tscr: "𝓉",
		TScy: "Ц",
		tscy: "ц",
		TSHcy: "Ћ",
		tshcy: "ћ",
		Tstrok: "Ŧ",
		tstrok: "ŧ",
		twixt: "≬",
		twoheadleftarrow: "↞",
		twoheadrightarrow: "↠",
		Uacute: "Ú",
		uacute: "ú",
		uarr: "↑",
		Uarr: "↟",
		uArr: "⇑",
		Uarrocir: "⥉",
		Ubrcy: "Ў",
		ubrcy: "ў",
		Ubreve: "Ŭ",
		ubreve: "ŭ",
		Ucirc: "Û",
		ucirc: "û",
		Ucy: "У",
		ucy: "у",
		udarr: "⇅",
		Udblac: "Ű",
		udblac: "ű",
		udhar: "⥮",
		ufisht: "⥾",
		Ufr: "𝔘",
		ufr: "𝔲",
		Ugrave: "Ù",
		ugrave: "ù",
		uHar: "⥣",
		uharl: "↿",
		uharr: "↾",
		uhblk: "▀",
		ulcorn: "⌜",
		ulcorner: "⌜",
		ulcrop: "⌏",
		ultri: "◸",
		Umacr: "Ū",
		umacr: "ū",
		uml: "¨",
		UnderBar: "_",
		UnderBrace: "⏟",
		UnderBracket: "⎵",
		UnderParenthesis: "⏝",
		Union: "⋃",
		UnionPlus: "⊎",
		Uogon: "Ų",
		uogon: "ų",
		Uopf: "𝕌",
		uopf: "𝕦",
		UpArrowBar: "⤒",
		uparrow: "↑",
		UpArrow: "↑",
		Uparrow: "⇑",
		UpArrowDownArrow: "⇅",
		updownarrow: "↕",
		UpDownArrow: "↕",
		Updownarrow: "⇕",
		UpEquilibrium: "⥮",
		upharpoonleft: "↿",
		upharpoonright: "↾",
		uplus: "⊎",
		UpperLeftArrow: "↖",
		UpperRightArrow: "↗",
		upsi: "υ",
		Upsi: "ϒ",
		upsih: "ϒ",
		Upsilon: "Υ",
		upsilon: "υ",
		UpTeeArrow: "↥",
		UpTee: "⊥",
		upuparrows: "⇈",
		urcorn: "⌝",
		urcorner: "⌝",
		urcrop: "⌎",
		Uring: "Ů",
		uring: "ů",
		urtri: "◹",
		Uscr: "𝒰",
		uscr: "𝓊",
		utdot: "⋰",
		Utilde: "Ũ",
		utilde: "ũ",
		utri: "▵",
		utrif: "▴",
		uuarr: "⇈",
		Uuml: "Ü",
		uuml: "ü",
		uwangle: "⦧",
		vangrt: "⦜",
		varepsilon: "ϵ",
		varkappa: "ϰ",
		varnothing: "∅",
		varphi: "ϕ",
		varpi: "ϖ",
		varpropto: "∝",
		varr: "↕",
		vArr: "⇕",
		varrho: "ϱ",
		varsigma: "ς",
		varsubsetneq: "⊊︀",
		varsubsetneqq: "⫋︀",
		varsupsetneq: "⊋︀",
		varsupsetneqq: "⫌︀",
		vartheta: "ϑ",
		vartriangleleft: "⊲",
		vartriangleright: "⊳",
		vBar: "⫨",
		Vbar: "⫫",
		vBarv: "⫩",
		Vcy: "В",
		vcy: "в",
		vdash: "⊢",
		vDash: "⊨",
		Vdash: "⊩",
		VDash: "⊫",
		Vdashl: "⫦",
		veebar: "⊻",
		vee: "∨",
		Vee: "⋁",
		veeeq: "≚",
		vellip: "⋮",
		verbar: "|",
		Verbar: "‖",
		vert: "|",
		Vert: "‖",
		VerticalBar: "∣",
		VerticalLine: "|",
		VerticalSeparator: "❘",
		VerticalTilde: "≀",
		VeryThinSpace: " ",
		Vfr: "𝔙",
		vfr: "𝔳",
		vltri: "⊲",
		vnsub: "⊂⃒",
		vnsup: "⊃⃒",
		Vopf: "𝕍",
		vopf: "𝕧",
		vprop: "∝",
		vrtri: "⊳",
		Vscr: "𝒱",
		vscr: "𝓋",
		vsubnE: "⫋︀",
		vsubne: "⊊︀",
		vsupnE: "⫌︀",
		vsupne: "⊋︀",
		Vvdash: "⊪",
		vzigzag: "⦚",
		Wcirc: "Ŵ",
		wcirc: "ŵ",
		wedbar: "⩟",
		wedge: "∧",
		Wedge: "⋀",
		wedgeq: "≙",
		weierp: "℘",
		Wfr: "𝔚",
		wfr: "𝔴",
		Wopf: "𝕎",
		wopf: "𝕨",
		wp: "℘",
		wr: "≀",
		wreath: "≀",
		Wscr: "𝒲",
		wscr: "𝓌",
		xcap: "⋂",
		xcirc: "◯",
		xcup: "⋃",
		xdtri: "▽",
		Xfr: "𝔛",
		xfr: "𝔵",
		xharr: "⟷",
		xhArr: "⟺",
		Xi: "Ξ",
		xi: "ξ",
		xlarr: "⟵",
		xlArr: "⟸",
		xmap: "⟼",
		xnis: "⋻",
		xodot: "⨀",
		Xopf: "𝕏",
		xopf: "𝕩",
		xoplus: "⨁",
		xotime: "⨂",
		xrarr: "⟶",
		xrArr: "⟹",
		Xscr: "𝒳",
		xscr: "𝓍",
		xsqcup: "⨆",
		xuplus: "⨄",
		xutri: "△",
		xvee: "⋁",
		xwedge: "⋀",
		Yacute: "Ý",
		yacute: "ý",
		YAcy: "Я",
		yacy: "я",
		Ycirc: "Ŷ",
		ycirc: "ŷ",
		Ycy: "Ы",
		ycy: "ы",
		yen: "¥",
		Yfr: "𝔜",
		yfr: "𝔶",
		YIcy: "Ї",
		yicy: "ї",
		Yopf: "𝕐",
		yopf: "𝕪",
		Yscr: "𝒴",
		yscr: "𝓎",
		YUcy: "Ю",
		yucy: "ю",
		yuml: "ÿ",
		Yuml: "Ÿ",
		Zacute: "Ź",
		zacute: "ź",
		Zcaron: "Ž",
		zcaron: "ž",
		Zcy: "З",
		zcy: "з",
		Zdot: "Ż",
		zdot: "ż",
		zeetrf: "ℨ",
		ZeroWidthSpace: "​",
		Zeta: "Ζ",
		zeta: "ζ",
		zfr: "𝔷",
		Zfr: "ℨ",
		ZHcy: "Ж",
		zhcy: "ж",
		zigrarr: "⇝",
		zopf: "𝕫",
		Zopf: "ℤ",
		Zscr: "𝒵",
		zscr: "𝓏",
		zwj: "‍",
		zwnj: "‌"
	};
	var htmlOutput = "";
	if (htmlInput.indexOf("&") > -1) {
		var arrEntities = htmlInput.split("&");
		htmlOutput = arrEntities[0];
		for (var i = 1; i < arrEntities.length; i++) {
			var strEntity = arrEntities[i];
			if (strEntity.indexOf(";") > -1) {
				var arrEntity = strEntity.split(";")
				var cEntity = arrEntity[0];
				var extEntity = "";
				for (var j = 1; j < arrEntity.length; j++) {
					if (j > 1) {
						extEntity += ";";
					}
					extEntity += arrEntity[j];
				}
				if (listDecode[cEntity]) {
					htmlOutput += listDecode[cEntity];
				} else {
					htmlOutput += "&"+cEntity+";";
				}
				htmlOutput += extEntity;
			} else {
				htmlOutput += "&"+strEntity;
			}
		}
	} else {
		htmlOutput = htmlInput;
	}
	return htmlOutput;
};
BF.JsonCreate          = function(arrInput)                          {
	return JSON.stringify(arrInput);
};
BF.JsonParse           = function(strInput)                          {
	return JSON.parse(strInput);
};
// String Actions
BF.IsSet               = function(objVar)                            {
	if(typeof objVar == "undefined") { return false; }
	return true;
};
BF.IsNull              = function(objVar)                            {
	     if(!BF.IsSet(objVar)) { return true; }
	else if(objVar == null)    { return true; }
	return false;
};
BF.IsEmpty             = function(objVar)                            {
	     if(BF.IsNull(objVar)) { return true; }
	else if(objVar == "")      { return true; }
	return false;
};
BF.IsNumeric           = function(n)                                 {
	return !isNaN(parseFloat(n)) && isFinite(n);
};
BF.IsArray             = function(arrInput)                          {
	if(Object.prototype.toString.call(arrInput) === '[object Array]') {
		return true;
	} else {
		return false;
	}
};
BF.IsObject            = function(objInput)                          {
	if(Object.prototype.toString.call(objInput) === '[object Object]') {
		return true;
	} else {
		return false;
	}
};
BF.ToString            = function(strInput)                          {
	        if (BF.IsEmpty(strInput))                       { return "";                       }
	else if (BF.IsArray(strInput) || BF.IsObject(strInput)) { return JSON.stringify(strInput); }
	return strInput.toString();
};
BF.ToInt               = function(strInput)                          {
	if (BF.IsNumeric(strInput)) {
		return parseInt(strInput);
	}
	else {
		return 0;
	}
};
BF.ToIntRounded        = function(strInput)                          {
	if (BF.IsNumeric(strInput)) {
		if (BF.ToString(BF.ToInt(strInput)) == BF.ToString(strInput)) {
			return BF.ToInt(parseFloat(strInput));
		}
		else {
			return BF.ToInt(parseFloat(strInput) + 0.5);
		}
	}
	else {
		return 0;
	}
};
BF.ToFloat             = function(strInput)                          {
	if (BF.IsNumeric(strInput)) {
		return parseFloat(strInput);
	}
	else {
		return 0.0;
	}
};
BF.ToFloatRounded      = function(strInput, iPercisionDigits)        {
	var divisionFactor = Math.pow(10,iPercisionDigits);
	if (BF.IsNumeric(strInput)) {
		return (BF.ToIntRounded(parseFloat(strInput)*divisionFactor))/divisionFactor;
	}
	else {
		return 0/divisionFactor;
	}
};
BF.Replace             = function(strInput, strFind, strReplace)     { 
	return strInput.replace(new RegExp(strFind, 'g'), strReplace);
};
BF.ReplaceFirst        = function(strInput, strFind, strReplace)     { 
	return strInput.replace(strFind, strReplace);
};
BF.ReplaceLast         = function(strInput, strFind, strReplace)     { 
	return strInput.replace(new RegExp(strFind + '$'), strReplace);
};
BF.TrimMultipleSpaces  = function(strInput)                          {
	var strOutput = strInput;    
	strOutput = strOutput.replace(/ +/g, ' ');
	return strOutput;
};
BF.Trim                = function(strInput)                          {
	var strOutput = strInput;
	strOutput = BF.Replace(strOutput, "\0", " ");
	strOutput = BF.Replace(strOutput, "\n", " ");
	strOutput = BF.Replace(strOutput, "\r", " ");
	strOutput = BF.Replace(strOutput, "\t", " ");
	strOutput = BF.TrimMultipleSpaces(strOutput);
	strOutput = strOutput.trim();
	return strOutput;
};
BF.Left                = function(str, n)                            {
	if (n <= 0)
		return "";
	else if (n > String(str).length)
		return str;
	else
		return String(str).substring(0,n);
};
BF.Right               = function(str, n)                            {
	if (n <= 0)
		return "";
	else if (n > String(str).length)
		return str;
	else {
		var iLen = String(str).length;
		return String(str).substring(iLen, iLen - n);
	}
};
BF.SubString           = function(strInput, iFrom, iCount)           {
	return strInput.substr(iFrom,iCount);
};
BF.CharAt              = function(str, n)                            {
	return str.charAt(n);
};
BF.IndexOf             = function(strInput, strFind)                 {
	return strInput.indexOf(strFind);
};
BF.Contains            = function(strInput, strFind)                 {
	if (strInput.indexOf(strFind) > -1) {
		return true;
	} else {
		return false;
	}
};
BF.StartsWith          = function(strInput, strFind)                 {
	if (BF.IsArray(strInput)) {
		return (strInput[0] == strFind);
	}
	else {
		var strLength = strFind.length;
		return (BF.Left(strInput, strLength) == strFind);
	}
};
BF.EndsWith            = function(strInput, strFind)                 {
	if (BF.IsArray(strInput)) {
		return (strInput[strInput.length-1] == strFind);
	}
	else {
		var strLength = strFind.length;
		return (BF.Right(strInput, strLength) == strFind);
	}
};
BF.LowerCase           = function(strInput)                          {
	return strInput.toLowerCase();
};
BF.UpperCase           = function(strInput)                          {
	return strInput.toUpperCase();
};
BF.Split               = function(strInput, strSplitter)             {
	if (BF.Contains(strInput, strSplitter)) {
		return strInput.split(strSplitter);
	} else {
		return [strInput];
	}
};
BF.BeforeFirstSplit    = function(strInput, strSplitter)             {
	if (BF.Contains(strInput, strSplitter)) {
		return strInput.split(strSplitter)[0];
	} else {
		return "";
	}
};
BF.AfterFirstSplit     = function(strInput, strSplitter)             {
	if (BF.Contains(strInput, strSplitter)) {
		var arrSplitted = strInput.split(strSplitter);
		var arrSplittedNoFirst = arrSplitted.slice(1);
		return arrSplittedNoFirst.join(strSplitter);
	} else {
		return "";
	}
};
BF.BeforeLastSplit     = function(strInput, strSplitter)             {
	if (BF.Contains(strInput, strSplitter)) {
		var arrSplitted = strInput.split(strSplitter);
		var arrSplittedNoLast = arrSplitted.slice(0, arrSplitted.length-1);
		return arrSplittedNoLast.join(strSplitter);
	} else {
		return "";
	}
};
BF.AfterLastSplit      = function(strInput, strSplitter)             {
	if (BF.Contains(strInput, strSplitter)) {
		var arrSplitted = strInput.split(strSplitter);
		return arrSplitted[arrSplitted.length-1];
	} else {
		return "";
	}
};
BF.Length              = function(strInput)                          {
	return strInput.length;
};
BF.Base64Encode        = function(strInput)                          {
	return Base64.encode(strInput);
};
BF.Base64Decode        = function(strInput)                          {
	return Base64.decode(strInput);
};
BF.Md5                 = function(strInput)                          {
	return Md5Hash(strInput);
};
// Safe Input
BF.IsValidDomain       = function(strInput)                          { 
	var re = new RegExp(/^((?:(?:(?:\w[\.\-\+]?)*)\w)+)((?:(?:(?:\w[\.\-\+]?){0,62})\w)+)\.(\w{2,6})$/); 
	return re.test(strInput);
};
BF.IsValidEmail        = function(strInput)                          {
	var re = /^(([^<>()\[\]\\.,;:\s@"]+(\.[^<>()\[\]\\.,;:\s@"]+)*)|(".+"))@((\[[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}])|(([a-zA-Z\-0-9]+\.)+[a-zA-Z]{2,}))$/;
	return re.test(strInput);
};
BF.HtmlToText          = function(htmlInput)                         {
	var element = document.createElement('div');
	var str = htmlInput;
	if(str && typeof str === 'string') {
		str = str.replace(/<script[^>]*>([\S\s]*?)<\/script>/gmi, '');
		str = str.replace(/<\/?\w(?:[^"'>]|"[^"]*"|'[^']*')*>/gmi, '');
		element.innerHTML = str;
		str = element.textContent || element.innerText;
	}
	element.innerHTML = "";
	element = null;
	return str;
};
BF.TextToSafeUri       = function(strInput)                          {
	strOutput = strInput;
	// decode any special chars
	strOutput = BF.HtmlToText(strOutput);
	strOutput = BF.HtmlCharsDecode(strOutput);
	//strOutput = BF.UrlDecode(strOutput);
	// conver text to lowercase
	strOutput = BF.LowerCase(strOutput);
	// change newline chars into spaces
	strOutput = BF.Replace(strOutput,"\0"," ");
	strOutput = BF.Replace(strOutput,"\t"," ");
	strOutput = BF.Replace(strOutput,"\n"," ");
	strOutput = BF.Replace(strOutput,"\r"," ");
	// strip any quotes
	strOutput = BF.Replace(strOutput,"'","");
	strOutput = BF.Replace(strOutput,"\"","");
	strOutput = BF.Replace(strOutput,"‘","");
	strOutput = BF.Replace(strOutput,"’","");
	strOutput = BF.Replace(strOutput,"'","");
	strOutput = BF.Replace(strOutput,"“","");
	strOutput = BF.Replace(strOutput,"”","");
	// change any utf8 non-alphanumeric chars into spaces
	strOutput = strOutput.replace(/[^0-9A-Za-z\xAA\xB5\xBA\xC0-\xD6\xD8-\xF6\xF8-\u02C1\u02C6-\u02D1\u02E0-\u02E4\u02EC\u02EE\u0370-\u0374\u0376\u0377\u037A-\u037D\u0386\u0388-\u038A\u038C\u038E-\u03A1\u03A3-\u03F5\u03F7-\u0481\u048A-\u0527\u0531-\u0556\u0559\u0561-\u0587\u05D0-\u05EA\u05F0-\u05F2\u0620-\u064A\u066E\u066F\u0671-\u06D3\u06D5\u06E5\u06E6\u06EE\u06EF\u06FA-\u06FC\u06FF\u0710\u0712-\u072F\u074D-\u07A5\u07B1\u07CA-\u07EA\u07F4\u07F5\u07FA\u0800-\u0815\u081A\u0824\u0828\u0840-\u0858\u08A0\u08A2-\u08AC\u0904-\u0939\u093D\u0950\u0958-\u0961\u0971-\u0977\u0979-\u097F\u0985-\u098C\u098F\u0990\u0993-\u09A8\u09AA-\u09B0\u09B2\u09B6-\u09B9\u09BD\u09CE\u09DC\u09DD\u09DF-\u09E1\u09F0\u09F1\u0A05-\u0A0A\u0A0F\u0A10\u0A13-\u0A28\u0A2A-\u0A30\u0A32\u0A33\u0A35\u0A36\u0A38\u0A39\u0A59-\u0A5C\u0A5E\u0A72-\u0A74\u0A85-\u0A8D\u0A8F-\u0A91\u0A93-\u0AA8\u0AAA-\u0AB0\u0AB2\u0AB3\u0AB5-\u0AB9\u0ABD\u0AD0\u0AE0\u0AE1\u0B05-\u0B0C\u0B0F\u0B10\u0B13-\u0B28\u0B2A-\u0B30\u0B32\u0B33\u0B35-\u0B39\u0B3D\u0B5C\u0B5D\u0B5F-\u0B61\u0B71\u0B83\u0B85-\u0B8A\u0B8E-\u0B90\u0B92-\u0B95\u0B99\u0B9A\u0B9C\u0B9E\u0B9F\u0BA3\u0BA4\u0BA8-\u0BAA\u0BAE-\u0BB9\u0BD0\u0C05-\u0C0C\u0C0E-\u0C10\u0C12-\u0C28\u0C2A-\u0C33\u0C35-\u0C39\u0C3D\u0C58\u0C59\u0C60\u0C61\u0C85-\u0C8C\u0C8E-\u0C90\u0C92-\u0CA8\u0CAA-\u0CB3\u0CB5-\u0CB9\u0CBD\u0CDE\u0CE0\u0CE1\u0CF1\u0CF2\u0D05-\u0D0C\u0D0E-\u0D10\u0D12-\u0D3A\u0D3D\u0D4E\u0D60\u0D61\u0D7A-\u0D7F\u0D85-\u0D96\u0D9A-\u0DB1\u0DB3-\u0DBB\u0DBD\u0DC0-\u0DC6\u0E01-\u0E30\u0E32\u0E33\u0E40-\u0E46\u0E81\u0E82\u0E84\u0E87\u0E88\u0E8A\u0E8D\u0E94-\u0E97\u0E99-\u0E9F\u0EA1-\u0EA3\u0EA5\u0EA7\u0EAA\u0EAB\u0EAD-\u0EB0\u0EB2\u0EB3\u0EBD\u0EC0-\u0EC4\u0EC6\u0EDC-\u0EDF\u0F00\u0F40-\u0F47\u0F49-\u0F6C\u0F88-\u0F8C\u1000-\u102A\u103F\u1050-\u1055\u105A-\u105D\u1061\u1065\u1066\u106E-\u1070\u1075-\u1081\u108E\u10A0-\u10C5\u10C7\u10CD\u10D0-\u10FA\u10FC-\u1248\u124A-\u124D\u1250-\u1256\u1258\u125A-\u125D\u1260-\u1288\u128A-\u128D\u1290-\u12B0\u12B2-\u12B5\u12B8-\u12BE\u12C0\u12C2-\u12C5\u12C8-\u12D6\u12D8-\u1310\u1312-\u1315\u1318-\u135A\u1380-\u138F\u13A0-\u13F4\u1401-\u166C\u166F-\u167F\u1681-\u169A\u16A0-\u16EA\u1700-\u170C\u170E-\u1711\u1720-\u1731\u1740-\u1751\u1760-\u176C\u176E-\u1770\u1780-\u17B3\u17D7\u17DC\u1820-\u1877\u1880-\u18A8\u18AA\u18B0-\u18F5\u1900-\u191C\u1950-\u196D\u1970-\u1974\u1980-\u19AB\u19C1-\u19C7\u1A00-\u1A16\u1A20-\u1A54\u1AA7\u1B05-\u1B33\u1B45-\u1B4B\u1B83-\u1BA0\u1BAE\u1BAF\u1BBA-\u1BE5\u1C00-\u1C23\u1C4D-\u1C4F\u1C5A-\u1C7D\u1CE9-\u1CEC\u1CEE-\u1CF1\u1CF5\u1CF6\u1D00-\u1DBF\u1E00-\u1F15\u1F18-\u1F1D\u1F20-\u1F45\u1F48-\u1F4D\u1F50-\u1F57\u1F59\u1F5B\u1F5D\u1F5F-\u1F7D\u1F80-\u1FB4\u1FB6-\u1FBC\u1FBE\u1FC2-\u1FC4\u1FC6-\u1FCC\u1FD0-\u1FD3\u1FD6-\u1FDB\u1FE0-\u1FEC\u1FF2-\u1FF4\u1FF6-\u1FFC\u2071\u207F\u2090-\u209C\u2102\u2107\u210A-\u2113\u2115\u2119-\u211D\u2124\u2126\u2128\u212A-\u212D\u212F-\u2139\u213C-\u213F\u2145-\u2149\u214E\u2183\u2184\u2C00-\u2C2E\u2C30-\u2C5E\u2C60-\u2CE4\u2CEB-\u2CEE\u2CF2\u2CF3\u2D00-\u2D25\u2D27\u2D2D\u2D30-\u2D67\u2D6F\u2D80-\u2D96\u2DA0-\u2DA6\u2DA8-\u2DAE\u2DB0-\u2DB6\u2DB8-\u2DBE\u2DC0-\u2DC6\u2DC8-\u2DCE\u2DD0-\u2DD6\u2DD8-\u2DDE\u2E2F\u3005\u3006\u3031-\u3035\u303B\u303C\u3041-\u3096\u309D-\u309F\u30A1-\u30FA\u30FC-\u30FF\u3105-\u312D\u3131-\u318E\u31A0-\u31BA\u31F0-\u31FF\u3400-\u4DB5\u4E00-\u9FCC\uA000-\uA48C\uA4D0-\uA4FD\uA500-\uA60C\uA610-\uA61F\uA62A\uA62B\uA640-\uA66E\uA67F-\uA697\uA6A0-\uA6E5\uA717-\uA71F\uA722-\uA788\uA78B-\uA78E\uA790-\uA793\uA7A0-\uA7AA\uA7F8-\uA801\uA803-\uA805\uA807-\uA80A\uA80C-\uA822\uA840-\uA873\uA882-\uA8B3\uA8F2-\uA8F7\uA8FB\uA90A-\uA925\uA930-\uA946\uA960-\uA97C\uA984-\uA9B2\uA9CF\uAA00-\uAA28\uAA40-\uAA42\uAA44-\uAA4B\uAA60-\uAA76\uAA7A\uAA80-\uAAAF\uAAB1\uAAB5\uAAB6\uAAB9-\uAABD\uAAC0\uAAC2\uAADB-\uAADD\uAAE0-\uAAEA\uAAF2-\uAAF4\uAB01-\uAB06\uAB09-\uAB0E\uAB11-\uAB16\uAB20-\uAB26\uAB28-\uAB2E\uABC0-\uABE2\uAC00-\uD7A3\uD7B0-\uD7C6\uD7CB-\uD7FB\uF900-\uFA6D\uFA70-\uFAD9\uFB00-\uFB06\uFB13-\uFB17\uFB1D\uFB1F-\uFB28\uFB2A-\uFB36\uFB38-\uFB3C\uFB3E\uFB40\uFB41\uFB43\uFB44\uFB46-\uFBB1\uFBD3-\uFD3D\uFD50-\uFD8F\uFD92-\uFDC7\uFDF0-\uFDFB\uFE70-\uFE74\uFE76-\uFEFC\uFF21-\uFF3A\uFF41-\uFF5A\uFF66-\uFFBE\uFFC2-\uFFC7\uFFCA-\uFFCF\uFFD2-\uFFD7\uFFDA-\uFFDC\s]+/g, ' ');
	// trim multiple spaces into one space
	strOutput = BF.TrimMultipleSpaces(strOutput);
	// regular trim
	strOutput = strOutput.trim();
	// change spaces to "-" so we can use the text in URIs
	strOutput = BF.Replace(strOutput," ","-");
	return strOutput;
};
BF.TextToSafeMetaValue = function(strInput)                          {
	strOutput = strInput;
	// decode any special chars
	strOutput = BF.HtmlToText(strOutput);
	strOutput = BF.HtmlCharsDecode(strOutput);
	//strOutput = BF.UrlDecode(strOutput);
	// conver text to lowercase
	strOutput = BF.LowerCase(strOutput);
	// change newline chars into spaces
	strOutput = BF.Replace(strOutput,"\0"," ");
	strOutput = BF.Replace(strOutput,"\t"," ");
	strOutput = BF.Replace(strOutput,"\n"," ");
	strOutput = BF.Replace(strOutput,"\r"," ");
	// change any not accepted chars into spaces
	strOutput = strOutput.replace(/[^0-9\\.\\,\\?\\'\\"\\!\\(\\)\\&\\:\\;\\-\\+\\*\\@\\%\\/\\#\\<\\>A-Za-z\xAA\xB5\xBA\xC0-\xD6\xD8-\xF6\xF8-\u02C1\u02C6-\u02D1\u02E0-\u02E4\u02EC\u02EE\u0370-\u0374\u0376\u0377\u037A-\u037D\u0386\u0388-\u038A\u038C\u038E-\u03A1\u03A3-\u03F5\u03F7-\u0481\u048A-\u0527\u0531-\u0556\u0559\u0561-\u0587\u05D0-\u05EA\u05F0-\u05F2\u0620-\u064A\u066E\u066F\u0671-\u06D3\u06D5\u06E5\u06E6\u06EE\u06EF\u06FA-\u06FC\u06FF\u0710\u0712-\u072F\u074D-\u07A5\u07B1\u07CA-\u07EA\u07F4\u07F5\u07FA\u0800-\u0815\u081A\u0824\u0828\u0840-\u0858\u08A0\u08A2-\u08AC\u0904-\u0939\u093D\u0950\u0958-\u0961\u0971-\u0977\u0979-\u097F\u0985-\u098C\u098F\u0990\u0993-\u09A8\u09AA-\u09B0\u09B2\u09B6-\u09B9\u09BD\u09CE\u09DC\u09DD\u09DF-\u09E1\u09F0\u09F1\u0A05-\u0A0A\u0A0F\u0A10\u0A13-\u0A28\u0A2A-\u0A30\u0A32\u0A33\u0A35\u0A36\u0A38\u0A39\u0A59-\u0A5C\u0A5E\u0A72-\u0A74\u0A85-\u0A8D\u0A8F-\u0A91\u0A93-\u0AA8\u0AAA-\u0AB0\u0AB2\u0AB3\u0AB5-\u0AB9\u0ABD\u0AD0\u0AE0\u0AE1\u0B05-\u0B0C\u0B0F\u0B10\u0B13-\u0B28\u0B2A-\u0B30\u0B32\u0B33\u0B35-\u0B39\u0B3D\u0B5C\u0B5D\u0B5F-\u0B61\u0B71\u0B83\u0B85-\u0B8A\u0B8E-\u0B90\u0B92-\u0B95\u0B99\u0B9A\u0B9C\u0B9E\u0B9F\u0BA3\u0BA4\u0BA8-\u0BAA\u0BAE-\u0BB9\u0BD0\u0C05-\u0C0C\u0C0E-\u0C10\u0C12-\u0C28\u0C2A-\u0C33\u0C35-\u0C39\u0C3D\u0C58\u0C59\u0C60\u0C61\u0C85-\u0C8C\u0C8E-\u0C90\u0C92-\u0CA8\u0CAA-\u0CB3\u0CB5-\u0CB9\u0CBD\u0CDE\u0CE0\u0CE1\u0CF1\u0CF2\u0D05-\u0D0C\u0D0E-\u0D10\u0D12-\u0D3A\u0D3D\u0D4E\u0D60\u0D61\u0D7A-\u0D7F\u0D85-\u0D96\u0D9A-\u0DB1\u0DB3-\u0DBB\u0DBD\u0DC0-\u0DC6\u0E01-\u0E30\u0E32\u0E33\u0E40-\u0E46\u0E81\u0E82\u0E84\u0E87\u0E88\u0E8A\u0E8D\u0E94-\u0E97\u0E99-\u0E9F\u0EA1-\u0EA3\u0EA5\u0EA7\u0EAA\u0EAB\u0EAD-\u0EB0\u0EB2\u0EB3\u0EBD\u0EC0-\u0EC4\u0EC6\u0EDC-\u0EDF\u0F00\u0F40-\u0F47\u0F49-\u0F6C\u0F88-\u0F8C\u1000-\u102A\u103F\u1050-\u1055\u105A-\u105D\u1061\u1065\u1066\u106E-\u1070\u1075-\u1081\u108E\u10A0-\u10C5\u10C7\u10CD\u10D0-\u10FA\u10FC-\u1248\u124A-\u124D\u1250-\u1256\u1258\u125A-\u125D\u1260-\u1288\u128A-\u128D\u1290-\u12B0\u12B2-\u12B5\u12B8-\u12BE\u12C0\u12C2-\u12C5\u12C8-\u12D6\u12D8-\u1310\u1312-\u1315\u1318-\u135A\u1380-\u138F\u13A0-\u13F4\u1401-\u166C\u166F-\u167F\u1681-\u169A\u16A0-\u16EA\u1700-\u170C\u170E-\u1711\u1720-\u1731\u1740-\u1751\u1760-\u176C\u176E-\u1770\u1780-\u17B3\u17D7\u17DC\u1820-\u1877\u1880-\u18A8\u18AA\u18B0-\u18F5\u1900-\u191C\u1950-\u196D\u1970-\u1974\u1980-\u19AB\u19C1-\u19C7\u1A00-\u1A16\u1A20-\u1A54\u1AA7\u1B05-\u1B33\u1B45-\u1B4B\u1B83-\u1BA0\u1BAE\u1BAF\u1BBA-\u1BE5\u1C00-\u1C23\u1C4D-\u1C4F\u1C5A-\u1C7D\u1CE9-\u1CEC\u1CEE-\u1CF1\u1CF5\u1CF6\u1D00-\u1DBF\u1E00-\u1F15\u1F18-\u1F1D\u1F20-\u1F45\u1F48-\u1F4D\u1F50-\u1F57\u1F59\u1F5B\u1F5D\u1F5F-\u1F7D\u1F80-\u1FB4\u1FB6-\u1FBC\u1FBE\u1FC2-\u1FC4\u1FC6-\u1FCC\u1FD0-\u1FD3\u1FD6-\u1FDB\u1FE0-\u1FEC\u1FF2-\u1FF4\u1FF6-\u1FFC\u2071\u207F\u2090-\u209C\u2102\u2107\u210A-\u2113\u2115\u2119-\u211D\u2124\u2126\u2128\u212A-\u212D\u212F-\u2139\u213C-\u213F\u2145-\u2149\u214E\u2183\u2184\u2C00-\u2C2E\u2C30-\u2C5E\u2C60-\u2CE4\u2CEB-\u2CEE\u2CF2\u2CF3\u2D00-\u2D25\u2D27\u2D2D\u2D30-\u2D67\u2D6F\u2D80-\u2D96\u2DA0-\u2DA6\u2DA8-\u2DAE\u2DB0-\u2DB6\u2DB8-\u2DBE\u2DC0-\u2DC6\u2DC8-\u2DCE\u2DD0-\u2DD6\u2DD8-\u2DDE\u2E2F\u3005\u3006\u3031-\u3035\u303B\u303C\u3041-\u3096\u309D-\u309F\u30A1-\u30FA\u30FC-\u30FF\u3105-\u312D\u3131-\u318E\u31A0-\u31BA\u31F0-\u31FF\u3400-\u4DB5\u4E00-\u9FCC\uA000-\uA48C\uA4D0-\uA4FD\uA500-\uA60C\uA610-\uA61F\uA62A\uA62B\uA640-\uA66E\uA67F-\uA697\uA6A0-\uA6E5\uA717-\uA71F\uA722-\uA788\uA78B-\uA78E\uA790-\uA793\uA7A0-\uA7AA\uA7F8-\uA801\uA803-\uA805\uA807-\uA80A\uA80C-\uA822\uA840-\uA873\uA882-\uA8B3\uA8F2-\uA8F7\uA8FB\uA90A-\uA925\uA930-\uA946\uA960-\uA97C\uA984-\uA9B2\uA9CF\uAA00-\uAA28\uAA40-\uAA42\uAA44-\uAA4B\uAA60-\uAA76\uAA7A\uAA80-\uAAAF\uAAB1\uAAB5\uAAB6\uAAB9-\uAABD\uAAC0\uAAC2\uAADB-\uAADD\uAAE0-\uAAEA\uAAF2-\uAAF4\uAB01-\uAB06\uAB09-\uAB0E\uAB11-\uAB16\uAB20-\uAB26\uAB28-\uAB2E\uABC0-\uABE2\uAC00-\uD7A3\uD7B0-\uD7C6\uD7CB-\uD7FB\uF900-\uFA6D\uFA70-\uFAD9\uFB00-\uFB06\uFB13-\uFB17\uFB1D\uFB1F-\uFB28\uFB2A-\uFB36\uFB38-\uFB3C\uFB3E\uFB40\uFB41\uFB43\uFB44\uFB46-\uFBB1\uFBD3-\uFD3D\uFD50-\uFD8F\uFD92-\uFDC7\uFDF0-\uFDFB\uFE70-\uFE74\uFE76-\uFEFC\uFF21-\uFF3A\uFF41-\uFF5A\uFF66-\uFFBE\uFFC2-\uFFC7\uFFCA-\uFFCF\uFFD2-\uFFD7\uFFDA-\uFFDC\s]+/g, ' ');
	// trim multiple spaces into one space
	strOutput = BF.TrimMultipleSpaces(strOutput);
	// regular trim
	strOutput = strOutput.trim();
	// encode back some special html chars that appear in the allowed chars
	strOutput = BF.Replace(strOutput,"&","&amp;");
	strOutput = BF.Replace(strOutput,"'","&apos;");
	strOutput = BF.Replace(strOutput,"`","&rsquo;");
	strOutput = BF.Replace(strOutput,"\"","&quot;");
	strOutput = BF.Replace(strOutput,"<","&lt;");
	strOutput = BF.Replace(strOutput,">","&gt;");
	strOutput = BF.Replace(strOutput,"/","&frasl;");
	return strOutput;
};
// Dates
BF.ToDate              = function(strDateTime)                       {
	return new Date(strDateTime).getTime();
};
BF.TextDate            = function(dtDateTime)                        {
	var d = new Date(dtDateTime);
	var monthNames = ["January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December"];
	return monthNames[d.getMonth()]+" "+d.getDate().toString()+", "+d.getFullYear().toString();
};
BF.TextTime            = function(dtDateTime)                        {
	var d = new Date(dtDateTime);
	return d.getHours().toString()+":"+((d.getMinutes()<10?"0":""))+d.getMinutes().toString();
};
BF.TimeSec             = function(dtDateTime)                        {
	var d = new Date(dtDateTime);
	return d.getHours().toString()+":"+((d.getMinutes()<10?"0":""))+d.getMinutes().toString()+":"+((d.getSeconds()<10?"0":""))+d.getSeconds().toString();
};
BF.DbStyleDate         = function(dtDateTime)                        {
	var d = new Date(dtDateTime);
	return d.getFullYear().toString()+"-"+(((d.getMonth()+1)<10?"0":""))+(d.getMonth()+1).toString()+"-"+((d.getDate()<10?"0":""))+d.getDate().toString();
};
BF.DbStyleDateTime     = function(dtDateTime)                        {
	return BF.DbStyleDate(dtDateTime)+" "+BF.TimeSec(dtDateTime);
};
BF.AmericanDate        = function(dtDateTime)                        {
	var d = new Date(dtDateTime);
	return (((d.getMonth()+1)<10?"0":""))+(d.getMonth()+1).toString()+"-"+((d.getDate()<10?"0":""))+d.getDate().toString()+"-"+d.getFullYear().toString();
};
BF.EuropeanDate        = function(dtDateTime)                        {
	var d = new Date(dtDateTime);
	return ((d.getDate()<10?"0":""))+d.getDate().toString()+"-"+(((d.getMonth()+1)<10?"0":""))+(d.getMonth()+1).toString()+"-"+d.getFullYear().toString();
};
BF.IsraeliDate         = function(dtDateTime)                        {
	var d = new Date(dtDateTime);
	return ((d.getDate()<10?"0":""))+d.getDate().toString()+"/"+(((d.getMonth()+1)<10?"0":""))+(d.getMonth()+1).toString()+"/"+d.getFullYear().toString();
};
BF.IsraeliTime         = function(dtDateTime)                        {
	var d = new Date(dtDateTime);
	return ((d.getHours()<10?"0":""))+d.getHours().toString()+":"+((d.getMinutes()<10?"0":""))+d.getMinutes().toString();
};
BF.ShortDate           = function(dtDateTime)                        {
	var d = new Date(dtDateTime);
	return ((d.getDate()<10?"0":""))+d.getDate().toString()+"/"+(((d.getMonth()+1)<10?"0":""))+(d.getMonth()+1).toString();
};
// Random
BF.Rand                = function(iLow, iHigh, iPointDigits)         {
	if (!iPointDigits) { iPointDigits = 0; }
	var mult = Math.pow(10, iPointDigits);
	return Math.round((Math.random()*(iHigh-iLow)+iLow)*mult)/mult;
};
BF.GuidV4              = function()                                  {
	return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function(c) {
		var r = Math.random()*16|0, v = c == 'x' ? r : (r&0x3|0x8);
		return v.toString(16);
	});
};
// Query String and Cookies
BF.GetQsVar            = function(strFieldName)                      {
	var results = "";
	var qsName = strFieldName.replace(/[\[\]]/g, "\\$&");
	var regex = new RegExp("[?&]" + qsName + "(=([^&#]*)|&|#|$)"), results = regex.exec(window.location.href);
	if (!results) return "";
	if (!results[2]) return "";
	return decodeURIComponent(results[2].replace(/\+/g, " "));
};
BF.SetCookieVar        = function(name,value,days)                   {
	var expires = "";
	if (days) {
		var date = new Date();
		date.setTime(date.getTime() + (days*24*60*60*1000));
		expires = "; expires=" + date.toUTCString();
	}
	document.cookie = name + "=" + value + expires + "; path=/";
};
BF.GetCookieVar        = function(name)                              {
	var nameEQ = name + "=";
	var ca = document.cookie.split(';');
	for(var i=0;i < ca.length;i++) {
		var c = ca[i];
		while (c.charAt(0)==' ') c = c.substring(1,c.length);
		if (c.indexOf(nameEQ) == 0) return c.substring(nameEQ.length,c.length);
	}
	return "";
};
BF.PurgeCookie         = function(name)                              {
	BF.SetCookieVar(name,"",-1);
};
// Ajax
BF.CreateHttpObject    = function()                                  {
	if (typeof XMLHttpRequest !== 'undefined') {
		return new XMLHttpRequest();
	}
	var versions = [
		"MSXML2.XmlHttp.6.0",
		"MSXML2.XmlHttp.5.0",
		"MSXML2.XmlHttp.4.0",
		"MSXML2.XmlHttp.3.0",
		"MSXML2.XmlHttp.2.0",
		"Microsoft.XmlHttp"
	];
	var xhr = null;
	for (var i = 0; i < versions.length; i++) {
		try {
			xhr = new ActiveXObject(versions[i]);
			break;
		} catch (e) {}
	}
	return xhr;
};
BF.HttpGetRequest      = function(fileName,okFunc,failFunc)          {
	var xmlhttp0=BF.CreateHttpObject();
	if (xmlhttp0!=null) {
		xmlhttp0.open("GET",fileName,true);
		xmlhttp0.setRequestHeader("Content-type", "application/x-www-form-urlencoded;");
		xmlhttp0.onreadystatechange=function() {
			if (xmlhttp0.readyState==4) {
				if (xmlhttp0.status==200){
					if(okFunc) { 
						okFunc(xmlhttp0.responseText);
					}
				} else {
					if (failFunc) {
						failFunc("Error"+" "+xmlhttp0.status+": "+xmlhttp0.responseText);
					} else {
						window.console.log("Error"+" "+xmlhttp0.status+": "+xmlhttp0.responseText);
					}
				}
			}
		}
		xmlhttp0.withCredentials = true;
		xmlhttp0.send(null);
	}
	else { window.console.log("Error: Your browser does not support AJAX."); }
};
BF.HttpPostRequest     = function(fileName,postData,okFunc,failFunc) {
	if (!postData){ postData = ""; }        
	var xmlhttp0=BF.CreateHttpObject();
	if (xmlhttp0!=null) {
		xmlhttp0.open("POST",fileName,true);
		xmlhttp0.setRequestHeader("Content-type", "application/x-www-form-urlencoded;");
		xmlhttp0.onreadystatechange=function() {
			if (xmlhttp0.readyState==4) {
				if (xmlhttp0.status==200){
					if(okFunc) { 
						okFunc(xmlhttp0.responseText);
					}
				} else {
					if (failFunc) {
						failFunc("Error"+" "+xmlhttp0.status+": "+xmlhttp0.responseText);
					} else {
						window.console.log("Error"+" "+xmlhttp0.status+": "+xmlhttp0.responseText);
					}
				}
			}
		}
		xmlhttp0.withCredentials = true;
		xmlhttp0.send(postData);
	}
	else { window.console.log("Error: Your browser does not support AJAX."); }
};
BF.FormSerialize       = function(elmForm)                           {
	var getstr = "";
	for (i=0; i<elmForm.elements.length; i++) {
		if (elmForm.elements[i].tagName.toLowerCase() == "input") {
			switch(elmForm.elements[i].type.toLowerCase()){
				case "checkbox":
					if (elmForm.elements[i].checked) { getstr += ((getstr!="")?"&":"") + elmForm.elements[i].name + "=" + encodeURIComponent(elmForm.elements[i].value);}
					break;
				case "radio":
					if (elmForm.elements[i].checked) {getstr += ((getstr!="")?"&":"") + elmForm.elements[i].name + "=" + encodeURIComponent(elmForm.elements[i].value);}
					break;
				default:
					if (elmForm.elements[i].value != ""){getstr += ((getstr!="")?"&":"") + elmForm.elements[i].name + "=" + encodeURIComponent(elmForm.elements[i].value);}
			}
		}
		if (elmForm.elements[i].tagName.toLowerCase() == "select") {
			var sel = elmForm.elements[i];
			getstr += ((getstr!="")?"&":"") + sel.name + "=" + encodeURIComponent(sel.options[sel.selectedIndex].value);
		}
		if (elmForm.elements[i].tagName.toLowerCase() == "textarea") {
			getstr += ((getstr!="")?"&":"") + elmForm.elements[i].name + "=" + encodeURIComponent(elmForm.elements[i].value);
		}
	}
	return getstr;
};
// HTML DOM
BF.AddElementToDom     = function(elmRoot, elmType, strId, strClass,
                                  strTitle, strStyle, strOnclick)    {
	var elmResult = document.createElement(elmType);
	if (strId)      { elmResult.setAttribute("id"     , strId);      }
	if (strClass)   { elmResult.setAttribute("class"  , strClass);   }
	if (strTitle)   { elmResult.setAttribute("title"  , strTitle);   }
	if (strStyle)   { elmResult.setAttribute("style"  , strStyle);   }
	if (strOnclick) { elmResult.setAttribute("onclick", strOnclick); }
	elmRoot.appendChild(elmResult);
	return elmResult;
};
BF.ElementEvent        = function(elem, eventName, eventFunc)        {
	if (elem.addEventListener) {
		elem.addEventListener(eventName, eventFunc, false);
	} else {
		elem.attachEvent("on" + eventName, function() {
			return(eventFunc.call(elem, window.event));   
		});
	}
};
BF.FuncOnElements      = function(cssSlctr, func /* elm, idx */)     {
	document.querySelectorAll(cssSlctr).forEach(func);
};
BF.hideElements        = function(cssSlctr)                          {
	BF.FuncOnElements(cssSlctr, function(elm,idx){
		elm.style.display = "none";
	});
};
BF.showElements        = function(cssSlctr)                          {
	BF.FuncOnElements(cssSlctr, function(elm,idx){
		elm.style.display = "";
	});
};
// Async Load
BF.LoadAsyncCss        = function(strCssLink)                        {
	var head  = document.getElementsByTagName('head')[0];
	var link  = document.createElement('link');
	link.rel  = 'stylesheet';
	link.type = 'text/css';
	link.href = strCssLink;
	head.appendChild(link);
};
BF.LoadAsyncJs         = function(strJsLink, okFunc)                 {
	var script = document.createElement('script');
	script.src = strJsLink;
	var head = document.getElementsByTagName('head')[0], done = false;
	script.onload = script.onreadystatechange = function() {
		if (!done && (!this.readyState || this.readyState == 'loaded' || this.readyState == 'complete')) {
			done = true;
			if(okFunc) { okFunc(); }
			script.onload = script.onreadystatechange = null;
		}
	};
	head.appendChild(script);
};
// Redirects
BF.Redirect            = function(strUrl)                            {
	window.location.href = strUrl;
};
BF.Stop                = function()                                  {
	throw "<-- Manually stopped execution of javascript -->";
};
// Console and Debug
BF.DebugText           = function(strInput)                          {
	window.console.log(BF.ToString(strInput));
};
// === Initializing ===
BF.Init                = function()                                  {
	BF.strUrl      = window.location.href;                                                         // will be url-encoded
	BF.strProtocol = window.location.protocol.replace(":","");                                     // http | https
	BF.strDomain   = window.location.hostname;                     
	BF.strUriClean = decodeURIComponent(window.location.pathname);                                 // decode the "clean" uri to a regular format
	if (BF.strUriClean == "") { BF.strUriClean = "/"; }                                            // assume empty uri as root path
	BF.strHash     = (window.location.hash.length   > 0) ? window.location.hash.slice(1)   : "";   // location hash
	BF.strQs       = (window.location.search.length > 0) ? window.location.search.slice(1) : "";   // query-string is url-encoded
	// calculate REQUST_URI
	BF.strUri = window.location.pathname;
	if (BF.strQs   != "") { BF.strUri += "?"+BF.strQs;   }
	if (BF.strHash != "") { BF.strUri += "#"+BF.strHash; }
	// calculate "Minisite" URI (level 1 folder)
	if (BF.strUriClean == "/") {
		BF.strMinisiteUri = "";
	} else {
		BF.strMinisiteUri = BF.strUriClean;                                                                             // fetch uri
		if (BF.strMinisiteUri.charAt(0) == "/") { BF.strMinisiteUri = BF.strMinisiteUri.slice(1); }                     // strip the preffix slash
		if (BF.Contains(BF.strMinisiteUri, "/")) { BF.strMinisiteUri = BF.BeforeFirstSplit(BF.strMinisiteUri, "/"); }   // extract level 1
		BF.strMinisiteUriEncoded = encodeURIComponent(BF.strMinisiteUri);                                               // also save the encoded version
	}
	// calculate current date formats
	BF.dtNow              = (new Date()).getTime();
	BF.strDate            = BF.TextDate(BF.dtNow);
	BF.strTime            = BF.TextTime(BF.dtNow);
	BF.strTimeSec         = BF.TimeSec(BF.dtNow);
	BF.strDbStyleDate     = BF.DbStyleDate(BF.dtNow);
	BF.strDbStyleDateTime = BF.DbStyleDateTime(BF.dtNow);
	BF.strAmericanDate    = BF.AmericanDate(BF.dtNow);
	BF.strEuropeanDate    = BF.EuropeanDate(BF.dtNow);
	BF.strIsraeliDate     = BF.IsraeliDate(BF.dtNow);
	BF.strIsraeliTime     = BF.IsraeliTime(BF.dtNow);
	BF.strShortDate       = BF.ShortDate(BF.dtNow);
	// calculate DateGuid
	BF.strDateGuid        = BF.DbStyleDateTime(BF.dtNow);
	BF.strDateGuid        = BF.Replace(BF.strDateGuid, " ", "");
	BF.strDateGuid        = BF.Replace(BF.strDateGuid, "-", "");
	BF.strDateGuid        = BF.Replace(BF.strDateGuid, ":", "");
}; BF.Init();
